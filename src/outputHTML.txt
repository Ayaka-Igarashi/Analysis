State(Data state,Consume the next input character:,List(Trans(U+0026 AMPERSAND (&amp;),Set the return state to the data state. Switch to the character reference state.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the tag open state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit the current input character as a character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(RCDATA state,Consume the next input character:,List(Trans(U+0026 AMPERSAND (&amp;),Set the return state to the RCDATA state. Switch to the character reference state.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the RCDATA less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(RAWTEXT state,Consume the next input character:,List(Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the RAWTEXT less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Script data state,Consume the next input character:,List(Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(PLAINTEXT state,Consume the next input character:,List(Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Tag open state,Consume the next input character:,List(Trans(U+0021 EXCLAMATION MARK (!),Switch to the markup declaration open state.), Trans(U+002F SOLIDUS (/),Switch to the end tag open state.), Trans(ASCII alpha,Create a new start tag token and set its tag name to the empty string. Reconsume in the tag name state. ), Trans(U+003F QUESTION MARK (?),This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.), Trans(EOF,This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token and an end-of-file token.), Trans(Anything else,This is an invalid-first-character-of-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the data state.)))
State(End tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the tag name state. ), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-end-tag-name parse error. Switch to the data state.), Trans(EOF,This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token and an end-of-file token. ), Trans(Anything else,This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.)))
State(Tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before attribute name state.), Trans(U+000A LINE FEED (LF),Switch to the before attribute name state.), Trans(U+000C FORM FEED (FF),Switch to the before attribute name state.), Trans(U+0020 SPACE,Switch to the before attribute name state.), Trans(U+002F SOLIDUS (/),Switch to the self-closing start tag state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current tag token.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag token's tag name.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current tag token's tag name.)))
State(RCDATA less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the RCDATA end tag open state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RCDATA state.)))
State(RCDATA end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the RCDATA end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RCDATA state.)))
State(RCDATA end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RCDATA state.)))
State(RAWTEXT less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the RAWTEXT end tag open state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RAWTEXT state.)))
State(RAWTEXT end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the RAWTEXT end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RAWTEXT state.)))
State(RAWTEXT end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RAWTEXT state.)))
State(Script data less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the script data end tag open state.), Trans(U+0021 EXCLAMATION MARK (!),Switch to the script data escape start state. Emit a U+003C LESS-THAN SIGN character token and a U+0021 EXCLAMATION MARK character token.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data state.)))
State(Script data end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the script data end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the script data state.)))
State(Script data end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the script data state.)))
State(Script data escape start state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escape start dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(Anything else,Reconsume in the script data state.)))
State(Script data escape start dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(Anything else,Reconsume in the script data state.)))
State(Script data escaped state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escaped dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data escaped less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Script data escaped dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data escaped less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Switch to the script data escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Switch to the script data escaped state. Emit the current input character as a character token.)))
State(Script data escaped dash dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data escaped less-than sign state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the script data state. Emit a U+003E GREATER-THAN SIGN character token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Switch to the script data escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Switch to the script data escaped state. Emit the current input character as a character token.)))
State(Script data escaped less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the script data escaped end tag open state.), Trans(ASCII alpha,Set the temporary buffer to the empty string. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data double escape start state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data escaped state.)))
State(Script data escaped end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the script data escaped end tag name state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the script data escaped state.)))
State(Script data escaped end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer  (in the order they were added to the buffer). Reconsume in the script data escaped state.)))
State(Script data double escape start state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(U+000A LINE FEED (LF),If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(U+000C FORM FEED (FF),If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(U+0020 SPACE,If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(U+002F SOLIDUS (/),If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.), Trans(ASCII lower alpha,Append the current input character to the temporary buffer. Emit the current input character as a character token.), Trans(Anything else,Reconsume in the script data escaped state.)))
State(Script data double escaped state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data double escaped dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Script data double escaped dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data double escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Switch to the script data double escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Switch to the script data double escaped state. Emit the current input character as a character token.)))
State(Script data double escaped dash dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the script data state. Emit a U+003E GREATER-THAN SIGN character token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Switch to the script data double escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Switch to the script data double escaped state. Emit the current input character as a character token.)))
State(Script data double escaped less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the script data double escape end state. Emit a U+002F SOLIDUS character token.), Trans(Anything else,Reconsume in the script data double escaped state.)))
State(Script data double escape end state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(U+000A LINE FEED (LF),If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(U+000C FORM FEED (FF),If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(U+0020 SPACE,If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(U+002F SOLIDUS (/),If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.), Trans(ASCII lower alpha,Append the current input character to the temporary buffer. Emit the current input character as a character token.), Trans(Anything else,Reconsume in the script data double escaped state.)))
State(Before attribute name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+002F SOLIDUS (/),Reconsume in the after attribute name state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Reconsume in the after attribute name state.), Trans(EOF,Reconsume in the after attribute name state.), Trans(U+003D EQUALS SIGN (=),This is an unexpected-equals-sign-before-attribute-name parse error. Start a new attribute in the current tag token. Set that attribute's name to the current input character, and its value to the empty string. Switch to the attribute name state.), Trans(Anything else,Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the attribute name state.)))
State(Attribute name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Reconsume in the after attribute name state.), Trans(U+000A LINE FEED (LF),Reconsume in the after attribute name state.), Trans(U+000C FORM FEED (FF),Reconsume in the after attribute name state.), Trans(U+0020 SPACE,Reconsume in the after attribute name state.), Trans(U+002F SOLIDUS (/),Reconsume in the after attribute name state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Reconsume in the after attribute name state.), Trans(EOF,Reconsume in the after attribute name state.), Trans(U+003D EQUALS SIGN (=),Switch to the before attribute value state.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current attribute's name.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's name.), Trans(U+0022 QUOTATION MARK ("),This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.), Trans(U+0027 APOSTROPHE ('),This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.), Trans(U+003C LESS-THAN SIGN (&lt;),This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.), Trans(Anything else,Append the current input character to the current attribute's name.)))
State(After attribute name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+002F SOLIDUS (/),Switch to the self-closing start tag state.), Trans(U+003D EQUALS SIGN (=),Switch to the before attribute value state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current tag token.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the attribute name state.)))
State(Before attribute value state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+0022 QUOTATION MARK ("),Switch to the attribute value (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),you Switch to the attribute value (single-quoted) state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-attribute-value parse error. Switch to the data state. Emit the current tag token.), Trans(Anything else,you Reconsume in the attribute value (unquoted) state.)))
State(Attribute value (double-quoted) state,Consume the next input character:,List(Trans(U+0022 QUOTATION MARK ("),Switch to the after attribute value (quoted) state.), Trans(U+0026 AMPERSAND (&amp;),you Set the return state to the attribute value (double-quoted) state. Switch to the character reference state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current attribute's value.)))
State(Attribute value (single-quoted) state,Consume the next input character:,List(Trans(U+0027 APOSTROPHE ('),Switch to the after attribute value (quoted) state.), Trans(U+0026 AMPERSAND (&amp;),you Set the return state to the attribute value (single-quoted) state. Switch to the character reference state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current attribute's value.)))
State(Attribute value (unquoted) state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before attribute name state.), Trans(U+000A LINE FEED (LF),Switch to the before attribute name state.), Trans(U+000C FORM FEED (FF),Switch to the before attribute name state.), Trans(U+0020 SPACE,Switch to the before attribute name state.), Trans(U+0026 AMPERSAND (&amp;),Set the return state to the attribute value (unquoted) state. Switch to the character reference state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current tag token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.), Trans(U+0022 QUOTATION MARK ("),This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.), Trans(U+0027 APOSTROPHE ('),This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.), Trans(U+003C LESS-THAN SIGN (&lt;),This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.), Trans(U+003D EQUALS SIGN (=),This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.), Trans(U+0060 GRAVE ACCENT (`),This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current attribute's value.)))
State(After attribute value (quoted) state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before attribute name state.), Trans(U+000A LINE FEED (LF),Switch to the before attribute name state.), Trans(U+000C FORM FEED (FF),Switch to the before attribute name state.), Trans(U+0020 SPACE,Switch to the before attribute name state.), Trans(U+002F SOLIDUS (/),Switch to the self-closing start tag state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current tag token.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,This is a missing-whitespace-between-attributes parse error. Reconsume in the before attribute name state. )))
State(Self-closing start tag state,Consume the next input character:,List(Trans(U+003E GREATER-THAN SIGN (&gt;),Set the self-closing flag of the current tag token. Switch to the data state. Emit the current tag token.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,This is an unexpected-solidus-in-tag parse error. Reconsume in the before attribute name state.)))
State(Bogus comment state,Consume the next input character:,List(Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the comment token.), Trans(EOF,Emit the comment. Emit an end-of-file token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.), Trans(Anything else,Append the current input character to the comment token's data.)))
State(Markup declaration open state,If the next few characters are: ,List(Trans(Two U+002D HYPHEN-MINUS characters (-),Consume those two characters, create a comment token whose data is the empty string, and switch to the comment start state.), Trans(ASCII case-insensitive match for the word "DOCTYPE",Consume those characters and switch to the DOCTYPE state.), Trans(The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after),Consume those characters. If there is an adjusted current node and it is not an element in the HTML namespace, then switch to the CDATA section state. Otherwise, this is a cdata-in-html-content parse error. Create a comment token whose data is the "[CDATA[" string. Switch to the bogus comment state.), Trans(Anything else,This is an incorrectly-opened-comment parse error. Create a comment token whose data is the empty string. Switch to the bogus comment state (don't consume anything in the current state).)))
State(Comment start state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the comment start dash state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-closing-of-empty-comment parse error. Switch to the data state. Emit the comment token.), Trans(Anything else,Reconsume in the comment state.)))
State(Comment start dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the comment end state), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-closing-of-empty-comment parse error. Switch to the data state. Emit the comment token.), Trans(EOF,This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.), Trans(Anything else,Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the comment state.)))
State(Comment state,Consume the next input character:,List(Trans(U+003C LESS-THAN SIGN (&lt;),Append the current input character to the comment token's data. Switch to the comment less-than sign state.), Trans(U+002D HYPHEN-MINUS (-),Switch to the comment end dash state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.), Trans(EOF,This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the comment token's data.)))
State(Comment less-than sign state,Consume the next input character:,List(Trans(U+0021 EXCLAMATION MARK (!),Append the current input character to the comment token's data. Switch to the comment less-than sign bang state.), Trans(U+003C LESS-THAN SIGN (&lt;),Append the current input character to the comment token's data.), Trans(Anything else,Reconsume in the comment state.)))
State(Comment less-than sign bang state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the comment less-than sign bang dash state.), Trans(Anything else,Reconsume in the comment state.)))
State(Comment less-than sign bang dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the comment less-than sign bang dash dash state.), Trans(Anything else,Reconsume in the comment end dash state.)))
State(Comment less-than sign bang dash dash state,Consume the next input character:,List(Trans(U+003E GREATER-THAN SIGN (&gt;),Reconsume in the comment end state.), Trans(EOF,Reconsume in the comment end state.), Trans(Anything else,This is a nested-comment parse error. Reconsume in the comment end state.)))
State(Comment end dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the comment end state), Trans(EOF,This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.), Trans(Anything else,Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the comment state.)))
State(Comment end state,Consume the next input character:,List(Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the comment token.), Trans(U+0021 EXCLAMATION MARK (!),Switch to the comment end bang state.), Trans(U+002D HYPHEN-MINUS (-),Append a U+002D HYPHEN-MINUS character (-) to the comment token's data.), Trans(EOF,This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.), Trans(Anything else,Append two U+002D HYPHEN-MINUS characters (-) to the comment token's data. Reconsume in the comment state.)))
State(Comment end bang state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character to the comment token's data. Switch to the comment end dash state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an incorrectly-closed-comment parse error. Switch to the data state. Emit the comment token.), Trans(EOF,This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.), Trans(Anything else,Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to the comment token's data. Reconsume in the comment state.)))
State(DOCTYPE state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before DOCTYPE name state.), Trans(U+000A LINE FEED (LF),Switch to the before DOCTYPE name state.), Trans(U+000C FORM FEED (FF),Switch to the before DOCTYPE name state.), Trans(U+0020 SPACE,Switch to the before DOCTYPE name state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Reconsume in the before DOCTYPE name state.), Trans(EOF,This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Emit the token. Emit an end-of-file token.), Trans(Anything else,This is a missing-whitespace-before-doctype-name parse error. Reconsume in the before DOCTYPE name state. )))
State(Before DOCTYPE name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(ASCII upper alpha,Create a new DOCTYPE token. Set the token's name to the lowercase version of the current input character (add 0x0020 to the character's code point). Switch to the DOCTYPE name state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Create a new DOCTYPE token. Set the token's name to a U+FFFD REPLACEMENT CHARACTER character. Switch to the DOCTYPE name state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-doctype-name parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Switch to the data state. Emit the token.), Trans(EOF,This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its  force-quirks flag to on. Emit the token. Emit an end-of-file token.), Trans(Anything else,Create a new DOCTYPE token. Set the token's name to the current input character. Switch to the DOCTYPE name state.)))
State(DOCTYPE name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the after DOCTYPE name state.), Trans(U+000A LINE FEED (LF),Switch to the after DOCTYPE name state.), Trans(U+000C FORM FEED (FF),Switch to the after DOCTYPE name state.), Trans(U+0020 SPACE,Switch to the after DOCTYPE name state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current DOCTYPE token's name.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's name.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current DOCTYPE token's name.)))
State(After DOCTYPE name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else, If the six characters starting from the current input character are an ASCII case-insensitive match for the word "PUBLIC", then consume those characters and switch to the after DOCTYPE public keyword state. Otherwise, if the six characters starting from the current input character are an ASCII case-insensitive match for the word "SYSTEM", then consume those characters and switch to the after DOCTYPE system keyword state. Otherwise, this is an invalid-character-sequence-after-doctype-name parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state. )))
State(After DOCTYPE public keyword state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before DOCTYPE public identifier state.), Trans(U+000A LINE FEED (LF),Switch to the before DOCTYPE public identifier state.), Trans(U+000C FORM FEED (FF),Switch to the before DOCTYPE public identifier state.), Trans(U+0020 SPACE,Switch to the before DOCTYPE public identifier state.), Trans(U+0022 QUOTATION MARK ("),This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (single-quoted) state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(Before DOCTYPE public identifier state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+0022 QUOTATION MARK ("),Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (single-quoted) state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(DOCTYPE public identifier (double-quoted) state,Consume the next input character:,List(Trans(U+0022 QUOTATION MARK ("),Switch to the after DOCTYPE public identifier state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current DOCTYPE token's public identifier.)))
State(DOCTYPE public identifier (single-quoted) state,Consume the next input character:,List(Trans(U+0027 APOSTROPHE ('),Switch to the after DOCTYPE public identifier state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current DOCTYPE token's public identifier.)))
State(After DOCTYPE public identifier state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the between DOCTYPE public and system identifiers state.), Trans(U+000A LINE FEED (LF),Switch to the between DOCTYPE public and system identifiers state.), Trans(U+000C FORM FEED (FF),Switch to the between DOCTYPE public and system identifiers state.), Trans(U+0020 SPACE,Switch to the between DOCTYPE public and system identifiers state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(U+0022 QUOTATION MARK ("),This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(Between DOCTYPE public and system identifiers state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(U+0022 QUOTATION MARK ("),Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(After DOCTYPE system keyword state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before DOCTYPE system identifier state.), Trans(U+000A LINE FEED (LF),Switch to the before DOCTYPE system identifier state.), Trans(U+000C FORM FEED (FF),Switch to the before DOCTYPE system identifier state.), Trans(U+0020 SPACE,Switch to the before DOCTYPE system identifier state.), Trans(U+0022 QUOTATION MARK ("),This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(Before DOCTYPE system identifier state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+0022 QUOTATION MARK ("),Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.), Trans(U+0027 APOSTROPHE ('),Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.)))
State(DOCTYPE system identifier (double-quoted) state,Consume the next input character:,List(Trans(U+0022 QUOTATION MARK ("),Switch to the after DOCTYPE system identifier state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current DOCTYPE token's system identifier.)))
State(DOCTYPE system identifier (single-quoted) state,Consume the next input character:,List(Trans(U+0027 APOSTROPHE ('),Switch to the after DOCTYPE system identifier state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.), Trans(U+003E GREATER-THAN SIGN (&gt;),This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current DOCTYPE token's system identifier.)))
State(After DOCTYPE system identifier state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,This is an unexpected-character-after-doctype-system-identifier parse error. Reconsume in the bogus DOCTYPE state. (This does not set the DOCTYPE token's force-quirks flag to on.))))
State(Bogus DOCTYPE state,Consume the next input character:,List(Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the DOCTYPE token.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Ignore the character.), Trans(EOF,Emit the DOCTYPE token. Emit an end-of-file token.), Trans(Anything else,Ignore the character.)))
State(CDATA section state,Consume the next input character:,List(Trans(U+005D RIGHT SQUARE BRACKET (]),Switch to the CDATA section bracket state.), Trans(EOF,This is an eof-in-cdata parse error. Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(CDATA section bracket state,Consume the next input character:,List(Trans(U+005D RIGHT SQUARE BRACKET (]),Switch to the CDATA section end state.), Trans(Anything else,Emit a U+005D RIGHT SQUARE BRACKET character token. Reconsume in the CDATA section state.)))
State(CDATA section end state,Consume the next input character:,List(Trans(U+005D RIGHT SQUARE BRACKET (]),Emit a U+005D RIGHT SQUARE BRACKET character token.), Trans(U+003E GREATER-THAN SIGN character,Switch to the data state.), Trans(Anything else,Emit two U+005D RIGHT SQUARE BRACKET character tokens. Reconsume in the CDATA section state.)))
State(Character reference state,Set the temporary buffer to the empty string. Append a U+0026 AMPERSAND (&amp;) character to the temporary buffer. Consume the next input character:,List(Trans(ASCII alphanumeric,Reconsume in the named character reference state.), Trans(U+0023 NUMBER SIGN (#),Append the current input character to the temporary buffer. Switch to the numeric character reference state.), Trans(Anything else,you Flush code points consumed as a character reference. Reconsume in the return state.)))
