State(Data state,Consume the next input character:,List(Trans(U+0026 AMPERSAND (&amp;),Set the return state to the data state. Switch to the character reference state.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the tag open state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit the current input character as a character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(RCDATA state,Consume the next input character:,List(Trans(U+0026 AMPERSAND (&amp;),Set the return state to the RCDATA state. Switch to the character reference state.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the RCDATA less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(RAWTEXT state,Consume the next input character:,List(Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the RAWTEXT less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Script data state,Consume the next input character:,List(Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(PLAINTEXT state,Consume the next input character:,List(Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(Tag open state,Consume the next input character:,List(Trans(U+0021 EXCLAMATION MARK (!),Switch to the markup declaration open state.), Trans(U+002F SOLIDUS (/),Switch to the end tag open state.), Trans(ASCII alpha,Create a new start tag token, set its tag name to the empty string. Reconsume in the tag name state. ), Trans(U+003F QUESTION MARK (?),This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.), Trans(EOF,This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token and an end-of-file token.), Trans(Anything else,This is an invalid-first-character-of-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the data state.)))
State(End tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the tag name state. ), Trans(U+003E GREATER-THAN SIGN (&gt;),This is a missing-end-tag-name parse error. Switch to the data state.), Trans(EOF,This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token and an end-of-file token. ), Trans(Anything else,This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.)))
State(Tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Switch to the before attribute name state.), Trans(U+000A LINE FEED (LF),Switch to the before attribute name state.), Trans(U+000C FORM FEED (FF),Switch to the before attribute name state.), Trans(U+0020 SPACE,Switch to the before attribute name state.), Trans(U+002F SOLIDUS (/),Switch to the self-closing start tag state.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current tag token.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag token's tag name.), Trans(EOF,This is an eof-in-tag parse error. Emit an end-of-file token.), Trans(Anything else,Append the current input character to the current tag token's tag name.)))
State(RCDATA less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the RCDATA end tag open state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RCDATA state.)))
State(RCDATA end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the RCDATA end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RCDATA state.)))
State(RCDATA end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RCDATA state.)))
State(RAWTEXT less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the RAWTEXT end tag open state.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RAWTEXT state.)))
State(RAWTEXT end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the RAWTEXT end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RAWTEXT state.)))
State(RAWTEXT end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RAWTEXT state.)))
State(Script data less-than sign state,Consume the next input character:,List(Trans(U+002F SOLIDUS (/),Set the temporary buffer to the empty string. Switch to the script data end tag open state.), Trans(U+0021 EXCLAMATION MARK (!),Switch to the script data escape start state. Emit a U+003C LESS-THAN SIGN character token and a U+0021 EXCLAMATION MARK character token.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data state.)))
State(Script data end tag open state,Consume the next input character:,List(Trans(ASCII alpha,Create a new end tag token, set its tag name to the empty string. Reconsume in the script data end tag name state. ), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the script data state.)))
State(Script data end tag name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000A LINE FEED (LF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+000C FORM FEED (FF),If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+0020 SPACE,If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+002F SOLIDUS (/),If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.), Trans(U+003E GREATER-THAN SIGN (&gt;),If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.), Trans(ASCII upper alpha,Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(ASCII lower alpha,Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.), Trans(Anything else,Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the script data state.)))
State(Script data escape start state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escape start dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(Anything else,Reconsume in the script data state.)))
State(Script data escape start dash state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(Anything else,Reconsume in the script data state.)))
State(Script data escaped state,Consume the next input character:,List(Trans(U+002D HYPHEN-MINUS (-),Switch to the script data escaped dash state. Emit a U+002D HYPHEN-MINUS character token.), Trans(U+003C LESS-THAN SIGN (&lt;),Switch to the script data escaped less-than sign state.), Trans(U+0000 NULL,This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.), Trans(EOF,This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.), Trans(Anything else,Emit the current input character as a character token.)))
State(After DOCTYPE name state,Consume the next input character:,List(Trans(U+0009 CHARACTER TABULATION (tab),Ignore the character.), Trans(U+000A LINE FEED (LF),Ignore the character.), Trans(U+000C FORM FEED (FF),Ignore the character.), Trans(U+0020 SPACE,Ignore the character.), Trans(U+003E GREATER-THAN SIGN (&gt;),Switch to the data state. Emit the current DOCTYPE token.), Trans(EOF,This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.), Trans(Anything else, If the six characters starting from the current input character are an ASCII case-insensitive match for the word "PUBLIC", then consume those characters and switch to the after DOCTYPE public keyword state. Otherwise, if the six characters starting from the current input character are an ASCII case-insensitive match for the word "SYSTEM", then consume those characters and switch to the after DOCTYPE system keyword state. Otherwise, this is an invalid-character-sequence-after-doctype-name parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state. )))
