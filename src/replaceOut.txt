Set the return state to the data state. Switch to the character reference state.
 => Set the return state to the data state. you Switch to the character reference state.
Switch to the tag open state.
 => you Switch to the tag open state.
This is an unexpected-null-character parse error. Emit the current input character as a character token.
 => This is an unexpected-null-character parse error. you Emit the current input character as a character token.
Emit an end-of-file token.
 => you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Set the return state to the RCDATA state. Switch to the character reference state.
 => Set the return state to the RCDATA state. you Switch to the character reference state.
Switch to the RCDATA less-than sign state.
 => you Switch to the RCDATA less-than sign state.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
Emit an end-of-file token.
 => you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the RAWTEXT less-than sign state.
 => you Switch to the RAWTEXT less-than sign state.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
Emit an end-of-file token.
 => you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the script data less-than sign state.
 => you Switch to the script data less-than sign state.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
Emit an end-of-file token.
 => you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
Emit an end-of-file token.
 => you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the markup declaration open state.
 => you Switch to the markup declaration open state.
Switch to the end tag open state.
 => you Switch to the end tag open state.
Create a new start tag token and set its tag name to the empty string. Reconsume in the tag name state. 
 => Create a new start tag token and set its tag name to the empty string. you Reconsume in the tag name state. 
This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.
 => This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string. you Reconsume in the bogus comment state.
This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token and an end-of-file token.
 => This is an eof-before-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token and an end-of-file token.
This is an invalid-first-character-of-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the data state.
 => This is an invalid-first-character-of-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the data state.
Create a new end tag token, set its tag name to the empty string. Reconsume in the tag name state. 
 => Create a new end tag token and set its tag name to the empty string. you Reconsume in the tag name state. 
This is a missing-end-tag-name parse error. Switch to the data state.
 => This is a missing-end-tag-name parse error. you Switch to the data state.
This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token and an end-of-file token. 
 => This is an eof-before-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token, a UP002F SOLIDUS character token and an end-of-file token. 
This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the bogus comment state.
 => This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string. you Reconsume in the bogus comment state.
Switch to the before attribute name state.
 => you Switch to the before attribute name state.
Switch to the self-closing start tag state.
 => you Switch to the self-closing start tag state.
Switch to the data state. Emit the current tag token.
 => you Switch to the data state. you Emit the current tag token.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag token's tag name.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current tag token's tag name.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
Append the current input character to the current tag token's tag name.
 => you Append the current input character to the current tag token's tag name.
Set the temporary buffer to the empty string. Switch to the RCDATA end tag open state.
 => Set the temporary buffer to the empty string. you Switch to the RCDATA end tag open state.
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RCDATA state.
 => you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the RCDATA state.
Create a new end tag token, set its tag name to the empty string. Reconsume in the RCDATA end tag name state. 
 => Create a new end tag token and set its tag name to the empty string. you Reconsume in the RCDATA end tag name state. 
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RCDATA state.
 => you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token. you Reconsume in the RCDATA state.
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the data state and you emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. you Append the current input character to the temporary buffer.
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the current input character to the current tag token's tag name. you Append the current input character to the temporary buffer.
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RCDATA state.
 => you Emit a UP003C LESS-THAN SIGN character token, a UP002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). you Reconsume in the RCDATA state.
Set the temporary buffer to the empty string. Switch to the RAWTEXT end tag open state.
 => Set the temporary buffer to the empty string. you Switch to the RAWTEXT end tag open state.
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RAWTEXT state.
 => you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the RAWTEXT state.
Create a new end tag token, set its tag name to the empty string. Reconsume in the RAWTEXT end tag name state. 
 => Create a new end tag token and set its tag name to the empty string. you Reconsume in the RAWTEXT end tag name state. 
Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token. Reconsume in the RAWTEXT state.
 => you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token. you Reconsume in the RAWTEXT state.
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the data state and you emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. you Append the current input character to the temporary buffer.
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the current input character to the current tag token's tag name. you Append the current input character to the temporary buffer.
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RAWTEXT state.
 => you Emit a UP003C LESS-THAN SIGN character token, a UP002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). you Reconsume in the RAWTEXT state.
Set the temporary buffer to the empty string. Switch to the script data end tag open state.
 => Set the temporary buffer to the empty string. you Switch to the script data end tag open state.
Switch to the script data escape start state. Emit a U+003C LESS-THAN SIGN character token and a U+0021 EXCLAMATION MARK character token.
 => you Switch to the script data escape start state. you Emit a UP003C LESS-THAN SIGN character token and a UP0021 EXCLAMATION MARK character token.
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data state.
 => you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the script data state.
Create a new end tag token, set its tag name to the empty string. Reconsume in the script data end tag name state. 
 => Create a new end tag token and set its tag name to the empty string. you Reconsume in the script data end tag name state. 
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the script data state.
 => you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token. you Reconsume in the script data state.
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the before attribute name state. Otherwise, you treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the data state and you emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. you Append the current input character to the temporary buffer.
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the current input character to the current tag token's tag name. you Append the current input character to the temporary buffer.
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the script data state.
 => you Emit a UP003C LESS-THAN SIGN character token, a UP002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). you Reconsume in the script data state.
Switch to the script data escape start dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data escape start dash state. you Emit a UP002D HYPHEN-MINUS character token.
Reconsume in the script data state.
 => you Reconsume in the script data state.
Switch to the script data escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data escaped dash dash state. you Emit a UP002D HYPHEN-MINUS character token.
Reconsume in the script data state.
 => you Reconsume in the script data state.
Switch to the script data escaped dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data escaped dash state. you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data escaped less-than sign state.
 => you Switch to the script data escaped less-than sign state.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the script data escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data escaped dash dash state. you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data escaped less-than sign state.
 => you Switch to the script data escaped less-than sign state.
This is an unexpected-null-character parse error. Switch to the script data escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Switch to the script data escaped state. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Switch to the script data escaped state. Emit the current input character as a character token.
 => you Switch to the script data escaped state. you Emit the current input character as a character token.
Emit a U+002D HYPHEN-MINUS character token.
 => you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data escaped less-than sign state.
 => you Switch to the script data escaped less-than sign state.
Switch to the script data state. Emit a U+003E GREATER-THAN SIGN character token.
 => you Switch to the script data state. you Emit a UP003E GREATER-THAN SIGN character token.
This is an unexpected-null-character parse error. Switch to the script data escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Switch to the script data escaped state. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Switch to the script data escaped state. Emit the current input character as a character token.
 => you Switch to the script data escaped state. you Emit the current input character as a character token.
Set the temporary buffer to the empty string. Switch to the script data escaped end tag open state.
 => Set the temporary buffer to the empty string. you Switch to the script data escaped end tag open state.
Set the temporary buffer to the empty string. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data double escape start state.
 => Set the temporary buffer to the empty string. you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the script data double escape start state.
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the script data escaped state.
 => you Emit a UP003C LESS-THAN SIGN character token. you Reconsume in the script data escaped state.
Create a new end tag token, set its tag name to the empty string. Reconsume in the script data escaped end tag name state.
 => Create a new end tag token and set its tag name to the empty string. you Reconsume in the script data escaped end tag name state.
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the script data escaped state.
 => you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token. you Reconsume in the script data escaped state.
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
 => If the current end tag token is an appropriate end tag token, then you switch to the data state and you emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. you Append the current input character to the temporary buffer.
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
 => you Append the current input character to the current tag token's tag name. you Append the current input character to the temporary buffer.
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer  (in the order they were added to the buffer). Reconsume in the script data escaped state.
 => you Emit a UP003C LESS-THAN SIGN character token, a UP002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer  (in the order they were added to the buffer). you Reconsume in the script data escaped state.
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, you switch to the script data escaped state. Emit the current input character as a character token.
 => If the temporary buffer is the string "script", then you switch to the script data double escaped state. Otherwise, you you switch to the script data escaped state. you Emit the current input character as a character token.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. you Emit the current input character as a character token.
Append the current input character to the temporary buffer. Emit the current input character as a character token.
 => you Append the current input character to the temporary buffer. you Emit the current input character as a character token.
Reconsume in the script data escaped state.
 => you Reconsume in the script data escaped state.
Switch to the script data double escaped dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data double escaped dash state. you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.
 => you Switch to the script data double escaped less-than sign state. you Emit a UP003C LESS-THAN SIGN character token.
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the script data double escaped dash dash state. Emit a U+002D HYPHEN-MINUS character token.
 => you Switch to the script data double escaped dash dash state. you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.
 => you Switch to the script data double escaped less-than sign state. you Emit a UP003C LESS-THAN SIGN character token.
This is an unexpected-null-character parse error. Switch to the script data double escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Switch to the script data double escaped state. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Switch to the script data double escaped state. Emit the current input character as a character token.
 => you Switch to the script data double escaped state. you Emit the current input character as a character token.
Emit a U+002D HYPHEN-MINUS character token.
 => you Emit a UP002D HYPHEN-MINUS character token.
Switch to the script data double escaped less-than sign state. Emit a U+003C LESS-THAN SIGN character token.
 => you Switch to the script data double escaped less-than sign state. you Emit a UP003C LESS-THAN SIGN character token.
Switch to the script data state. Emit a U+003E GREATER-THAN SIGN character token.
 => you Switch to the script data state. you Emit a UP003E GREATER-THAN SIGN character token.
This is an unexpected-null-character parse error. Switch to the script data double escaped state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
 => This is an unexpected-null-character parse error. you Switch to the script data double escaped state. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
 => This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
Switch to the script data double escaped state. Emit the current input character as a character token.
 => you Switch to the script data double escaped state. you Emit the current input character as a character token.
Set the temporary buffer to the empty string. Switch to the script data double escape end state. Emit a U+002F SOLIDUS character token.
 => Set the temporary buffer to the empty string. you Switch to the script data double escape end state. you Emit a UP002F SOLIDUS character token.
Reconsume in the script data double escaped state.
 => you Reconsume in the script data double escaped state.
If the temporary buffer is the string "script", then switch to the script data escaped state. Otherwise, switch to the script data double escaped state. Emit the current input character as a character token.
 => If the temporary buffer is the string "script", then you switch to the script data escaped state. Otherwise, you switch to the script data double escaped state. you Emit the current input character as a character token.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. you Emit the current input character as a character token.
Append the current input character to the temporary buffer. Emit the current input character as a character token.
 => you Append the current input character to the temporary buffer. you Emit the current input character as a character token.
Reconsume in the script data double escaped state.
 => you Reconsume in the script data double escaped state.
Ignore the character.
 => Ignore the character.
Reconsume in the after attribute name state.
 => you Reconsume in the after attribute name state.
This is an unexpected-equals-sign-before-attribute-name parse error. Start a new attribute in the current tag token. Set that attribute's name to the current input character, and its value to the empty string. Switch to the attribute name state.
 => This is an unexpected-equals-sign-before-attribute-name parse error. Start a new attribute in the current tag token and Set that attribute's name to the current input character, and its value to the empty string. you Switch to the attribute name state.
Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the attribute name state.
 => Start a new attribute in the current tag token and Set that attribute name and value to the empty string. you Reconsume in the attribute name state.
Reconsume in the after attribute name state.
 => you Reconsume in the after attribute name state.
Switch to the before attribute value state.
 => you Switch to the before attribute value state.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current attribute's name.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current attribute's name.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's name.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's name.
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
 => This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
Append the current input character to the current attribute's name.
 => you Append the current input character to the current attribute's name.
Ignore the character.
 => Ignore the character.
Switch to the self-closing start tag state.
 => you Switch to the self-closing start tag state.
Switch to the before attribute value state.
 => you Switch to the before attribute value state.
Switch to the data state. Emit the current tag token.
 => you Switch to the data state. you Emit the current tag token.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the attribute name state.
 => Start a new attribute in the current tag token and Set that attribute name and value to the empty string. you Reconsume in the attribute name state.
Ignore the character.
 => Ignore the character.
Switch to the attribute value (double-quoted) state.
 => you Switch to the attribute value (double-quoted) state.
you Switch to the attribute value (single-quoted) state.
 => you you Switch to the attribute value (single-quoted) state.
This is a missing-attribute-value parse error. Switch to the data state. Emit the current tag token.
 => This is a missing-attribute-value parse error. you Switch to the data state. you Emit the current tag token.
you Reconsume in the attribute value (unquoted) state.
 => you you Reconsume in the attribute value (unquoted) state.
Switch to the after attribute value (quoted) state.
 => you Switch to the after attribute value (quoted) state.
Set the return state to the attribute value (double-quoted) state. Switch to the character reference state.
 => Set the return state to the attribute value (double-quoted) state. you Switch to the character reference state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
Append the current input character to the current attribute's value.
 => you Append the current input character to the current attribute's value.
Switch to the after attribute value (quoted) state.
 => you Switch to the after attribute value (quoted) state.
you Set the return state to the attribute value (single-quoted) state. Switch to the character reference state.
 => you Set the return state to the attribute value (single-quoted) state. you Switch to the character reference state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
Append the current input character to the current attribute's value.
 => you Append the current input character to the current attribute's value.
Switch to the before attribute name state.
 => you Switch to the before attribute name state.
Set the return state to the attribute value (unquoted) state. Switch to the character reference state.
 => Set the return state to the attribute value (unquoted) state. you Switch to the character reference state.
Switch to the data state. Emit the current tag token.
 => you Switch to the data state. you Emit the current tag token.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
 => This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
Append the current input character to the current attribute's value.
 => you Append the current input character to the current attribute's value.
Switch to the before attribute name state.
 => you Switch to the before attribute name state.
Switch to the self-closing start tag state.
 => you Switch to the self-closing start tag state.
Switch to the data state. Emit the current tag token.
 => you Switch to the data state. you Emit the current tag token.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
This is a missing-whitespace-between-attributes parse error. Reconsume in the before attribute name state. 
 => This is a missing-whitespace-between-attributes parse error. you Reconsume in the before attribute name state. 
Set the self-closing flag of the current tag token. Switch to the data state. Emit the current tag token.
 => Set the self-closing flag of the current tag token. you Switch to the data state. you Emit the current tag token.
This is an eof-in-tag parse error. Emit an end-of-file token.
 => This is an eof-in-tag parse error. you Emit an end-of-file token.
This is an unexpected-solidus-in-tag parse error. Reconsume in the before attribute name state.
 => This is an unexpected-solidus-in-tag parse error. you Reconsume in the before attribute name state.
Switch to the data state. Emit the comment token.
 => you Switch to the data state. you Emit the comment token.
Emit the comment. Emit an end-of-file token.
 => you Emit the comment. you Emit an end-of-file token.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the comment token's data.
Append the current input character to the comment token's data.
 => you Append the current input character to the comment token's data.
Consume those two characters, create a comment token whose data is the empty string, and switch to the comment start state.
 => Consume those two characters, create a comment token whose data is the empty string, and you switch to the comment start state.
Consume those characters and switch to the DOCTYPE state.
 => Consume those characters and you switch to the DOCTYPE state.
Consume those characters. If there is an adjusted current node and it is not an element in the HTML namespace, then switch to the CDATA section state. Otherwise, this is a cdata-in-html-content parse error. Create a comment token whose data is the "[CDATA[" string. Switch to the bogus comment state.
 => Consume those characters. If there is an adjusted current node and it is not an element in the HTML namespace, then you switch to the CDATA section state. Otherwise, this is a cdata-in-html-content parse error. Create a comment token whose data is the "[CDATA[" string. you Switch to the bogus comment state.
This is an incorrectly-opened-comment parse error. Create a comment token whose data is the empty string. Switch to the bogus comment state (don't consume anything in the current state).
 => This is an incorrectly-opened-comment parse error. Create a comment token whose data is the empty string. you Switch to the bogus comment state (don't consume anything in the current state).
Switch to the comment start dash state.
 => you Switch to the comment start dash state.
This is an abrupt-closing-of-empty-comment parse error. Switch to the data state. Emit the comment token.
 => This is an abrupt-closing-of-empty-comment parse error. you Switch to the data state. you Emit the comment token.
Reconsume in the comment state.
 => you Reconsume in the comment state.
Switch to the comment end state
 => you Switch to the comment end state
This is an abrupt-closing-of-empty-comment parse error. Switch to the data state. Emit the comment token.
 => This is an abrupt-closing-of-empty-comment parse error. you Switch to the data state. you Emit the comment token.
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
 => This is an eof-in-comment parse error. you Emit the comment token. you Emit an end-of-file token.
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the comment state.
 => you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data. you Reconsume in the comment state.
Append the current input character to the comment token's data. Switch to the comment less-than sign state.
 => you Append the current input character to the comment token's data. you Switch to the comment less-than sign state.
Switch to the comment end dash state.
 => you Switch to the comment end dash state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the comment token's data.
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
 => This is an eof-in-comment parse error. you Emit the comment token. you Emit an end-of-file token.
Append the current input character to the comment token's data.
 => you Append the current input character to the comment token's data.
Append the current input character to the comment token's data. Switch to the comment less-than sign bang state.
 => you Append the current input character to the comment token's data. you Switch to the comment less-than sign bang state.
Append the current input character to the comment token's data.
 => you Append the current input character to the comment token's data.
Reconsume in the comment state.
 => you Reconsume in the comment state.
Switch to the comment less-than sign bang dash state.
 => you Switch to the comment less-than sign bang dash state.
Reconsume in the comment state.
 => you Reconsume in the comment state.
Switch to the comment less-than sign bang dash dash state.
 => you Switch to the comment less-than sign bang dash dash state.
Reconsume in the comment end dash state.
 => you Reconsume in the comment end dash state.
Reconsume in the comment end state.
 => you Reconsume in the comment end state.
This is a nested-comment parse error. Reconsume in the comment end state.
 => This is a nested-comment parse error. you Reconsume in the comment end state.
Switch to the comment end state
 => you Switch to the comment end state
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
 => This is an eof-in-comment parse error. you Emit the comment token. you Emit an end-of-file token.
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the comment state.
 => you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data. you Reconsume in the comment state.
Switch to the data state. Emit the comment token.
 => you Switch to the data state. you Emit the comment token.
Switch to the comment end bang state.
 => you Switch to the comment end bang state.
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data.
 => you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data.
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
 => This is an eof-in-comment parse error. you Emit the comment token. you Emit an end-of-file token.
Append two U+002D HYPHEN-MINUS characters (-) to the comment token's data. Reconsume in the comment state.
 => you Append two UP002D HYPHEN-MINUS characters (-) to the comment token's data. you Reconsume in the comment state.
Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (-EXC-) to the comment token's data. Switch to the comment end dash state.
 => you Append two UP002D HYPHEN-MINUS characters (-) and a UP0021 EXCLAMATION MARK character (-EXC-) to the comment token's data. you Switch to the comment end dash state.
This is an incorrectly-closed-comment parse error. Switch to the data state. Emit the comment token.
 => This is an incorrectly-closed-comment parse error. you Switch to the data state. you Emit the comment token.
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
 => This is an eof-in-comment parse error. you Emit the comment token. you Emit an end-of-file token.
Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to the comment token's data. Reconsume in the comment state.
 => you Append two UP002D HYPHEN-MINUS characters (-) and a UP0021 EXCLAMATION MARK character (-EXC-) to the comment token's data. you Reconsume in the comment state.
Switch to the before DOCTYPE name state.
 => you Switch to the before DOCTYPE name state.
Reconsume in the before DOCTYPE name state.
 => you Reconsume in the before DOCTYPE name state.
This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Emit the token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Create a new DOCTYPE token and Set its force-quirks flag to on. you Emit the token. you Emit an end-of-file token.
This is a missing-whitespace-before-doctype-name parse error. Reconsume in the before DOCTYPE name state. 
 => This is a missing-whitespace-before-doctype-name parse error. you Reconsume in the before DOCTYPE name state. 
Ignore the character.
 => Ignore the character.
Create a new DOCTYPE token. Set the token's name to the lowercase version of the current input character (add 0x0020 to the character's code point). Switch to the DOCTYPE name state.
 => Create a new DOCTYPE token and Set the token's name to the lowercase version of the current input character (add 0x0020 to the character's code point). you Switch to the DOCTYPE name state.
This is an unexpected-null-character parse error. Create a new DOCTYPE token. Set the token's name to a U+FFFD REPLACEMENT CHARACTER character. Switch to the DOCTYPE name state.
 => This is an unexpected-null-character parse error. Create a new DOCTYPE token and Set the token's name to a UPFFFD REPLACEMENT CHARACTER character. you Switch to the DOCTYPE name state.
This is a missing-doctype-name parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Switch to the data state. Emit the token.
 => This is a missing-doctype-name parse error. Create a new DOCTYPE token and Set its force-quirks flag to on. you Switch to the data state. you Emit the token.
This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its  force-quirks flag to on. Emit the token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Create a new DOCTYPE token and Set its  force-quirks flag to on. you Emit the token. you Emit an end-of-file token.
Create a new DOCTYPE token. Set the token's name to the current input character. Switch to the DOCTYPE name state.
 => Create a new DOCTYPE token and Set the token's name to the current input character. you Switch to the DOCTYPE name state.
Switch to the after DOCTYPE name state.
 => you Switch to the after DOCTYPE name state.
Switch to the data state. Emit the current DOCTYPE token.
 => you Switch to the data state. you Emit the current DOCTYPE token.
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current DOCTYPE token's name.
 => you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current DOCTYPE token's name.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's name.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's name.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
Append the current input character to the current DOCTYPE token's name.
 => you Append the current input character to the current DOCTYPE token's name.
Ignore the character.
 => Ignore the character.
Switch to the data state. Emit the current DOCTYPE token.
 => you Switch to the data state. you Emit the current DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
 If the six characters starting from the current input character are an ASCII case-insensitive match for the word "PUBLIC", then consume those characters and switch to the after DOCTYPE public keyword state. Otherwise, if the six characters starting from the current input character are an ASCII case-insensitive match for the word "SYSTEM", then consume those characters and switch to the after DOCTYPE system keyword state. Otherwise, this is an invalid-character-sequence-after-doctype-name parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state. 
 =>  If the six characters starting from the current input character are an ASCII case-insensitive match for the word "PUBLIC", then consume those characters and you switch to the after DOCTYPE public keyword state. Otherwise, if the six characters starting from the current input character are an ASCII case-insensitive match for the word "SYSTEM", then consume those characters and you switch to the after DOCTYPE system keyword state. Otherwise, this is an invalid-character-sequence-after-doctype-name parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state. 
Switch to the before DOCTYPE public identifier state.
 => you Switch to the before DOCTYPE public identifier state.
This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (double-quoted) state.
 => This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then you switch to the DOCTYPE public identifier (double-quoted) state.
This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (single-quoted) state.
 => This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then you switch to the DOCTYPE public identifier (single-quoted) state.
This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Ignore the character.
 => Ignore the character.
Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (double-quoted) state.
 => Set the DOCTYPE token's public identifier to the empty string (not missing), then you switch to the DOCTYPE public identifier (double-quoted) state.
Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE public identifier (single-quoted) state.
 => Set the DOCTYPE token's public identifier to the empty string (not missing), then you switch to the DOCTYPE public identifier (single-quoted) state.
This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Switch to the after DOCTYPE public identifier state.
 => you Switch to the after DOCTYPE public identifier state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
Append the current input character to the current DOCTYPE token's public identifier.
 => you Append the current input character to the current DOCTYPE token's public identifier.
Switch to the after DOCTYPE public identifier state.
 => you Switch to the after DOCTYPE public identifier state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
Append the current input character to the current DOCTYPE token's public identifier.
 => you Append the current input character to the current DOCTYPE token's public identifier.
Switch to the between DOCTYPE public and system identifiers state.
 => you Switch to the between DOCTYPE public and system identifiers state.
Switch to the data state. Emit the current DOCTYPE token.
 => you Switch to the data state. you Emit the current DOCTYPE token.
This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.
 => This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (double-quoted) state.
This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.
 => This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (single-quoted) state.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Ignore the character.
 => Ignore the character.
Switch to the data state. Emit the current DOCTYPE token.
 => you Switch to the data state. you Emit the current DOCTYPE token.
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.
 => Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (double-quoted) state.
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.
 => Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (single-quoted) state.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Switch to the before DOCTYPE system identifier state.
 => you Switch to the before DOCTYPE system identifier state.
This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.
 => This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (double-quoted) state.
This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.
 => This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (single-quoted) state.
This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Ignore the character.
 => Ignore the character.
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (double-quoted) state.
 => Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (double-quoted) state.
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE system identifier (single-quoted) state.
 => Set the DOCTYPE token's system identifier to the empty string (not missing), then you switch to the DOCTYPE system identifier (single-quoted) state.
This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the bogus DOCTYPE state.
 => This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Reconsume in the bogus DOCTYPE state.
Switch to the after DOCTYPE system identifier state.
 => you Switch to the after DOCTYPE system identifier state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
Append the current input character to the current DOCTYPE token's system identifier.
 => you Append the current input character to the current DOCTYPE token's system identifier.
Switch to the after DOCTYPE system identifier state.
 => you Switch to the after DOCTYPE system identifier state.
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
 => This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the data state. Emit that DOCTYPE token.
 => This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. you Switch to the data state. you Emit that DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
Append the current input character to the current DOCTYPE token's system identifier.
 => you Append the current input character to the current DOCTYPE token's system identifier.
Ignore the character.
 => Ignore the character.
Switch to the data state. Emit the current DOCTYPE token.
 => you Switch to the data state. you Emit the current DOCTYPE token.
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
 => This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. you Emit that DOCTYPE token. you Emit an end-of-file token.
This is an unexpected-character-after-doctype-system-identifier parse error. Reconsume in the bogus DOCTYPE state. (This does not set the DOCTYPE token's force-quirks flag to on.)
 => This is an unexpected-character-after-doctype-system-identifier parse error. you Reconsume in the bogus DOCTYPE state. (This does not set the DOCTYPE token's force-quirks flag to on.)
Switch to the data state. Emit the DOCTYPE token.
 => you Switch to the data state. you Emit the DOCTYPE token.
This is an unexpected-null-character parse error. Ignore the character.
 => This is an unexpected-null-character parse error. Ignore the character.
Emit the DOCTYPE token. Emit an end-of-file token.
 => you Emit the DOCTYPE token. you Emit an end-of-file token.
Ignore the character.
 => Ignore the character.
Switch to the CDATA section bracket state.
 => you Switch to the CDATA section bracket state.
This is an eof-in-cdata parse error. Emit an end-of-file token.
 => This is an eof-in-cdata parse error. you Emit an end-of-file token.
Emit the current input character as a character token.
 => you Emit the current input character as a character token.
Switch to the CDATA section end state.
 => you Switch to the CDATA section end state.
Emit a U+005D RIGHT SQUARE BRACKET character token. Reconsume in the CDATA section state.
 => you Emit a UP005D RIGHT SQUARE BRACKET character token. you Reconsume in the CDATA section state.
Emit a U+005D RIGHT SQUARE BRACKET character token.
 => you Emit a UP005D RIGHT SQUARE BRACKET character token.
Switch to the data state.
 => you Switch to the data state.
Emit two U+005D RIGHT SQUARE BRACKET character tokens. Reconsume in the CDATA section state.
 => you Emit two UP005D RIGHT SQUARE BRACKET character tokens. you Reconsume in the CDATA section state.
Reconsume in the named character reference state.
 => you Reconsume in the named character reference state.
Append the current input character to the temporary buffer. Switch to the numeric character reference state.
 => you Append the current input character to the temporary buffer. you Switch to the numeric character reference state.
you Flush code points consumed as a character reference. Reconsume in the return state.
 => you you Flush code points consumed as a character reference. you Reconsume in the return state.
 If the character reference was consumed as part of an attribute, and the last character matched is not a U+003B SEMICOLON character (;), and the next input character is either a U+003D EQUALS SIGN character (=) or an ASCII alphanumeric, then, for historical reasons, flush code points consumed as a character reference and switch to the return state.  Otherwise: If the last character matched is not a U+003B SEMICOLON character (;), then this is a missing-semicolon-after-character-reference parse error.Set the temporary buffer to the empty string. Append one or two characters corresponding to the character reference name (as given by the second column of the named character references table) to the temporary buffer.Flush code points consumed as a character reference. Switch to the return state. 
 =>  If the character reference was consumed as part of an attribute, and the last character matched is not a UP003B SEMICOLON character (;), and the next input character is either a UP003D EQUALS SIGN character (=) or an ASCII alphanumeric, then, for historical reasons, you flush code points consumed as a character reference and you switch to the return state.  Otherwise: If the last character matched is not a UP003B SEMICOLON character (;), then this is a missing-semicolon-after-character-reference parse error.Set the temporary buffer to the empty string. you Append one or two characters corresponding to the character reference name (as given by the second column of the named character references table) to the temporary buffer.you Flush code points consumed as a character reference. you Switch to the return state. 
Flush code points consumed as a character reference. Switch to the ambiguous ampersand state.
 => you Flush code points consumed as a character reference. you Switch to the ambiguous ampersand state.
If the character reference was consumed as part of an attribute, then append the current input character to the current attribute's value. Otherwise, emit the current input character as a character token.
 => If the character reference was consumed as part of an attribute, then you append the current input character to the current attribute's value. Otherwise, you emit the current input character as a character token.
This is an unknown-named-character-reference parse error. Reconsume in the return state. 
 => This is an unknown-named-character-reference parse error. you Reconsume in the return state. 
Reconsume in the return state.
 => you Reconsume in the return state.
Append the current input character to the temporary buffer. Switch to the hexadecimal character reference start state.
 => you Append the current input character to the temporary buffer. you Switch to the hexadecimal character reference start state.
Reconsume in the decimal character reference start state.
 => you Reconsume in the decimal character reference start state.
Reconsume in the hexadecimal character reference state.
 => you Reconsume in the hexadecimal character reference state.
This is an absence-of-digits-in-numeric-character-reference parse error. Flush code points consumed as a character reference. Reconsume in the return state.
 => This is an absence-of-digits-in-numeric-character-reference parse error. you Flush code points consumed as a character reference. you Reconsume in the return state.
Reconsume in the decimal character reference state.
 => you Reconsume in the decimal character reference state.
This is an absence-of-digits-in-numeric-character-reference parse error. Flush code points consumed as a character reference. Reconsume in the return state.
 => This is an absence-of-digits-in-numeric-character-reference parse error. you Flush code points consumed as a character reference. you Reconsume in the return state.
Multiply the character reference code by 16. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
 => multiply the character reference code by 16. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
Multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0037 from the character's code point) to the character reference code.
 => multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0037 from the character's code point) to the character reference code.
Multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0057 from the character's code point) to the character reference code.
 => multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0057 from the character's code point) to the character reference code.
Switch to the numeric character reference end state.
 => you Switch to the numeric character reference end state.
This is a missing-semicolon-after-character-reference parse error. Reconsume in the numeric character reference end state.
 => This is a missing-semicolon-after-character-reference parse error. you Reconsume in the numeric character reference end state.
Multiply the character reference code by 10. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
 => multiply the character reference code by 10. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
Switch to the numeric character reference end state.
 => you Switch to the numeric character reference end state.
This is a missing-semicolon-after-character-reference parse error. Reconsume in the numeric character reference end state.
 => This is a missing-semicolon-after-character-reference parse error. you Reconsume in the numeric character reference end state.
