Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(CD,Token(six,six)), Leaf(NNS,Token(characters,character)))), Node(VP,List(Leaf(VBG,Token(starting,start)), Node(PP,List(Leaf(IN,Token(from,from)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))))), Node(VP,List(Leaf(VBP,Token(are,be)), Node(NP,List(Node(NP,List(Leaf(DT,Token(an,a)), Node(ADJP,List(Node(NP,List(Leaf(NNP,Token(ASCII,ASCII)), Leaf(NN,Token(case,case)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(insensitive,insensitive)))), Leaf(NN,Token(match,match)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(word,word)), Leaf(LDoubleQuote,Token(",")), Leaf(NNP,Token(PUBLIC,PUBLIC)), Leaf(RDoubleQuote,Token(",")))))))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Node(VP,List(Leaf(VB,Token(consume,consume)), Node(NP,List(Leaf(DT,Token(those,those)), Leaf(NNS,Token(characters,character)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NNP,Token(DOCTYPE,DOCTYPE)))))))), Leaf(JJ,Token(public,public)), Leaf(JJ,Token(keyword,keyword)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(SBAR,List(Leaf(IN,Token(if,if)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(CD,Token(six,six)), Leaf(NNS,Token(characters,character)))), Node(VP,List(Leaf(VBG,Token(starting,start)), Node(PP,List(Leaf(IN,Token(from,from)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))))), Node(VP,List(Leaf(VBP,Token(are,be)), Node(NP,List(Node(NP,List(Leaf(DT,Token(an,a)), Node(ADJP,List(Node(NP,List(Leaf(NNP,Token(ASCII,ASCII)), Leaf(NN,Token(case,case)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(insensitive,insensitive)))), Leaf(NN,Token(match,match)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(word,word)), Leaf(LDoubleQuote,Token(",")), Leaf(NNP,Token(SYSTEM,system)), Leaf(RDoubleQuote,Token(",")))))))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Node(VP,List(Leaf(VB,Token(consume,consume)), Node(NP,List(Leaf(DT,Token(those,those)), Leaf(NNS,Token(characters,character)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(JJ,Token(DOCTYPE,DOCTYPE)), Leaf(NN,Token(system,system)))))))), Leaf(JJ,Token(keyword,keyword)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(NP,List(Leaf(DT,Token(this,this)))), Node(VP,List(Leaf(VBZ,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(ADJP,List(Leaf(JJ,Token(invalid,invalid)))), Leaf(HYPH,Token(-,-)), Node(NML,List(Node(NML,List(Leaf(NN,Token(character,character)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(sequence,sequence)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(after,after)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(doctype,doctype)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NNS,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(DOCTYPE,doctype)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Node(NML,List(Leaf(NN,Token(force,force)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(quirks,quirk)))), Leaf(NN,Token(flag,flag)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(PP,List(Leaf(IN,Token(on,on)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(bogus,bogus)), Leaf(JJ,Token(DOCTYPE,doctype)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
If(Bool(otherwise),null,List())
If(Bool(otherwise),null,List())
