26 : Script_data_double_escape_start_state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: U+000A LINE FEED (LF) --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: U+000C FORM FEED (FF) --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: U+0020 SPACE --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: U+002F SOLIDUS (/) --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the temporary buffer is the string "script", then switch to the script data double escaped state. Otherwise, switch to the script data escaped state. Emit the current input character as a character token.
  | If the temporary buffer is the string "script", then you switch to the Script_data_double_escaped_state. Otherwise, you switch to the Script_data_escaped_state. you Emit the current input character as a character token.
List((9,CHAIN9-["you" in sentence 1]))
List((9,CHAIN9-["you" in sentence 2]))
List((9,CHAIN9-["you" in sentence 3]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_double_escaped_state,script_data_double_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state)))
 -> Emit(List (current input character, ) _as a character token)

-- chara: ASCII upper alpha --
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.
  | you Append the lowercase version of the current input character (you add 0x0020 to the character's code point) to the temporary buffer. you Emit the current input character as a character token.
List((6,CHAIN6-["the current input character" in sentence 1, "the character 's" in sentence 1]), (12,CHAIN12-["you" in sentence 1, "you" in sentence 1]))
List((6,CHAIN6-["the current input character" in sentence 2]), (12,CHAIN12-["you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> Append(List (the lowercase version of the current input character, ) ,the temporary buffer)
 -> Emit(List (current input character, ) _as a character token)

-- chara: ASCII lower alpha --
Append the current input character to the temporary buffer. Emit the current input character as a character token.
  | you Append the current input character to the temporary buffer. you Emit the current input character as a character token.
List((5,CHAIN5-["the current input character" in sentence 1]), (7,CHAIN7-["you" in sentence 1]))
List((5,CHAIN5-["the current input character" in sentence 2]), (7,CHAIN7-["you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token))))))))))))

 -> Append(List (current input character, ) ,the temporary buffer)
 -> Emit(List (current input character, ) _as a character token)

-- chara: Anything else --
Reconsume in the script data escaped state.
  | you Reconsume in the Script_data_escaped_state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Script_data_escaped_state,script_data_escaped_state))))))))))))

 -> Reconsume(Script_data_escaped_state)

ListMap(Script_data_double_escape_start_state -> pState(Script_data_double_escape_start_state,List(),Map(ASCII lower alpha -> List(Append(List (current input character, ) ,the temporary buffer), Emit(List (current input character, ) _as a character token)), U+000A LINE FEED (LF) -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)), ASCII upper alpha -> List(Append(List (the lowercase version of the current input character, ) ,the temporary buffer), Emit(List (current input character, ) _as a character token)), U+0009 CHARACTER TABULATION (tab) -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)), U+003E GREATER-THAN SIGN (&gt;) -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)), U+0020 SPACE -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)), U+000C FORM FEED (FF) -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)), U+002F SOLIDUS (/) -> List(If(IsEqual(the temporary buffer,the string " script "),List(Switch(Script_data_double_escaped_state)),List(Switch(Script_data_escaped_state))), Emit(List (current input character, ) _as a character token)))))
