13 : RAWTEXT end tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string. Reconsume in the RAWTEXT end tag name state. 
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RAWTEXT,rawtext)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Create(a_new_end_tag_token)
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_RAWTEXT_end_tag_name_state)

-- chara: Anything else --
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RAWTEXT state.
List()
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Node(NML,List(Leaf(NNP,Token(U,u)), Leaf(NNP,Token(+003,+003)), Leaf(NNP,Token(C,c)), Leaf(NNP,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Node(NML,List(Leaf(NNP,Token(THAN,than)), Leaf(NNP,Token(SIGN,SIGN)))))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(U,u)), Leaf(NNP,Token(+002,+002)), Leaf(NNP,Token(F,F)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,rawtext)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(a_U_+003_C_LESS_-_THAN_SIGN_character_token_and_a_U_+002_F_SOLIDUS_character_token)
 -> Reconsume(the_RAWTEXT_state)

