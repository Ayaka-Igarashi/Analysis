11 : RCDATA_end_tag_name_state
Consume the next input character:
  | Consume the next input character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Consume,consume)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(next,next)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character))))))))))

 -> Consume(List (next input character, ) )

-- chara: U+0009 CHARACTER TABULATION (tab) --
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Before_attribute_name_state,before_attribute_name_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat()))

-- chara: U+000A LINE FEED (LF) --
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Before_attribute_name_state,before_attribute_name_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat()))

-- chara: U+000C FORM FEED (FF) --
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Before_attribute_name_state,before_attribute_name_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat()))

-- chara: U+0020 SPACE --
If the current end tag token is an appropriate end tag token, then switch to the before attribute name state. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Before_attribute_name_state,before_attribute_name_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat()))

-- chara: U+002F SOLIDUS (/) --
If the current end tag token is an appropriate end tag token, then switch to the self-closing start tag state. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Self_closing_start_tag_state. Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Self_closing_start_tag_state,self_closing_start_tag_state))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Self_closing_start_tag_state)),List(Treat()))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the current end tag token is an appropriate end tag token, then switch to the data state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
  | If the current end tag token is an appropriate end tag token, then you switch to the Data_state and you emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current end tag token" in sentence 1, "the current tag token" in sentence 1]))
List((8,CHAIN8-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(Data_state,data_state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token))))))))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below))))))))))

 -> If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Data_state), Emit(List (current tag token, ) )),List(Treat()))

-- chara: ASCII upper alpha --
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
  | you Append the lowercase version of the current input character (you add 0x0020 to the character's code point) to the current tag token's tag name. you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1, "the character 's" in sentence 1]), (14,CHAIN14-["you" in sentence 1, "you" in sentence 1]))
List((7,CHAIN7-["the current input character" in sentence 2]), (14,CHAIN14-["you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer))))))))))))

 -> Append(List (the lowercase version of the current input character, ) ,the current tag token 's tag name)
 -> Append(List (current input character, ) ,the temporary buffer)

-- chara: ASCII lower alpha --
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
  | you Append the current input character to the current tag token's tag name. you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1]), (9,CHAIN9-["you" in sentence 1]))
List((7,CHAIN7-["the current input character" in sentence 2]), (9,CHAIN9-["you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer))))))))))))

 -> Append(List (current input character, ) ,the current tag token 's tag name)
 -> Append(List (current input character, ) ,the temporary buffer)

-- chara: Anything else --
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RCDATA state.
  | you Emit a U_003C LESS_THAN SIGN character token, a U_002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were you added to the buffer). you Reconsume in the RCDATA_state.
List((10,CHAIN10-["the temporary buffer" in sentence 1, "the buffer" in sentence 1]), (12,CHAIN12-["you" in sentence 1, "you" in sentence 1]))
List((12,CHAIN12-["you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(U_003C,u_003c)), Leaf(NNP,Token(LESS_THAN,LESS_THAN)), Leaf(NNP,Token(SIGN,SIGN)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(Comma,Token(,,,)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(U_002F,u_002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(Comma,Token(,,,)), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Node(NP,List(Leaf(DT,Token(each,each)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(characters,character)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer))))))))))))))))))))))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA_state,RCDATA_state))))))))))))

 -> Emit(List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) )
 -> Reconsume(RCDATA_state)

ListMap(RCDATA_end_tag_name_state -> pState(RCDATA_end_tag_name_state,List(Consume(List (next input character, ) )),List((U+0009 CHARACTER TABULATION (tab),List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat())))), (U+000A LINE FEED (LF),List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat())))), (U+000C FORM FEED (FF),List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat())))), (U+0020 SPACE,List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Before_attribute_name_state)),List(Treat())))), (U+002F SOLIDUS (/),List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Self_closing_start_tag_state)),List(Treat())))), (U+003E GREATER-THAN SIGN (&gt;),List(If(IsEqual(the current end tag token,an appropriate end tag token),List(Switch(Data_state), Emit(List (current tag token, ) )),List(Treat())))), (ASCII upper alpha,List(Append(List (the lowercase version of the current input character, ) ,the current tag token 's tag name), Append(List (current input character, ) ,the temporary buffer))), (ASCII lower alpha,List(Append(List (current input character, ) ,the current tag token 's tag name), Append(List (current input character, ) ,the temporary buffer))), (Anything else,List(Emit(List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) ), Reconsume(RCDATA_state))))))
