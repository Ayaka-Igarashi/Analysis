1 : Data state
-- chara: U+0026 AMPERSAND (&amp;) --
Set the return state to the data state and you Switch to the character reference state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(return,return)), Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Set(the_return_state,the_data_state)
 -> Switch(the_character_reference_state)

-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the tag open state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(tag,tag)), Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_tag_open_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit the current input character as a character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

-- chara: EOF --
you Emit an end-of-file token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

2 : RCDATA state
-- chara: U+0026 AMPERSAND (&amp;) --
Set the return state to the RCDATA state and you Switch to the character reference state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(return,return)), Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Set(the_return_state,the_RCDATA_state)
 -> Switch(the_character_reference_state)

-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the RCDATA less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)))), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_RCDATA_less_-_than_sign_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
you Emit an end-of-file token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

3 : RAWTEXT state
-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the RAWTEXT less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,RAWTEXT)), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)))))))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_RAWTEXT_less_-_than_sign_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
you Emit an end-of-file token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

4 : Script data state
-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_less_-_than_sign_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
you Emit an end-of-file token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

5 : PLAINTEXT state
-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
you Emit an end-of-file token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

6 : Tag open state
-- chara: U+0021 EXCLAMATION MARK (!) --
you Switch to the markup declaration open state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(ADJP,List(Node(NP,List(Leaf(NN,Token(markup,markup)), Leaf(NN,Token(declaration,declaration)))), Leaf(JJ,Token(open,open)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_markup_declaration_open_state)

-- chara: U+002F SOLIDUS (/) --
you Switch to the end tag open state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_end_tag_open_state)

-- chara: ASCII alpha --
Create a new start tag token and set its tag name to the empty string and you Reconsume in the tag name state. 
List((1,CHAIN1-["a new start tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Create(List (a_new_start_tag_token, ))
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_tag_name_state)

-- chara: U+003F QUESTION MARK (?) --
This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string and you Reconsume in the bogus comment state.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(unexpected,unexpected)), Node(NML,List(Node(PP,List(Leaf(SYM,Token(-,-)), Node(NP,List(Leaf(NN,Token(question,question)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(mark,mark)))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Node(ADVP,List(Leaf(RB,Token(instead,instead)))), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(bogus,bogus)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_question_-_mark_-_instead_-_of_-_tag_-_name_parse_error)
 -> Create(List (a_comment_token_whose_data_is_the_empty_string, ))
 -> Reconsume(the_bogus_comment_state)

-- chara: EOF --
This is an eof-before-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token and an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(before,before)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_before_-_tag_-_name_parse_error)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, an_end_-_of_-_file_token, ))

-- chara: Anything else --
This is an invalid-first-character-of-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the data state.
List()
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(invalid,invalid)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(first,first)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_invalid_-_first_-_character_-_of_-_tag_-_name_parse_error)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))
 -> Reconsume(the_data_state)

7 : End tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string and you Reconsume in the tag name state. 
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Create(List (a_new_end_tag_token, ))
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_tag_name_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
This is a missing-end-tag-name parse error. you Switch to the data state.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Leaf(JJ,Token(missing,missing)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(NML,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))), Leaf(NNS,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(a_missing_-_end_-_tag_-_name_parse_error)
 -> Switch(the_data_state)

-- chara: EOF --
This is an eof-before-tag-name parse error. you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and an end-of-file token. 
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(before,before)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
NAC is not defined : 2
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_before_-_tag_-_name_parse_error)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))

-- chara: Anything else --
This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string and you Reconsume in the bogus comment state.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(invalid,invalid)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(first,first)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(bogus,bogus)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_invalid_-_first_-_character_-_of_-_tag_-_name_parse_error)
 -> Create(List (a_comment_token_whose_data_is_the_empty_string, ))
 -> Reconsume(the_bogus_comment_state)

8 : Tag name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000A LINE FEED (LF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000C FORM FEED (FF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+0020 SPACE --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+002F SOLIDUS (/) --
you Switch to the self-closing start tag state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_self_-_closing_start_tag_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the current tag token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_current_tag_token, ))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.
List((6,CHAIN6-["the current input character" in sentence 1, "the character 's" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_tag_token_'s_tag_name)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current tag token's tag name.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_current_tag_token_'s_tag_name)

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append the current input character to the current tag token's tag name.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_tag_token_'s_tag_name)

9 : RCDATA less-than sign state
-- chara: U+002F SOLIDUS (/) --
Set the temporary buffer to the empty string and you Switch to the RCDATA end tag open state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))))), Node(NP,List(Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))))), Node(NP,List(Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))

 -> Set(the_temporary_buffer,the_empty_string)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the RCDATA state.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))
 -> Reconsume(the_RCDATA_state)

10 : RCDATA end tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string and you Reconsume in the RCDATA end tag name state. 
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Create(List (a_new_end_tag_token, ))
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_RCDATA_end_tag_name_state)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and you Reconsume in the RCDATA state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, ))
 -> Reconsume(the_RCDATA_state)

11 : RCDATA end tag name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000A LINE FEED (LF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000C FORM FEED (FF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+0020 SPACE --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+002F SOLIDUS (/) --
If the current end tag token is an appropriate end tag token , then you switch to the self-closing start tag state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_self_-_closing_start_tag_state)),List(Treat()))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the current end tag token is an appropriate end tag token , then you switch to the data state and you emit the current tag token . Otherwise, treat it as per the "anything else" entry below.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current end tag token" in sentence 1, "the current tag token" in sentence 1]))
List((8,CHAIN8-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.)))
error_otherwise

 -> If(Bool(otherwise),null,List(Treat()))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: ASCII lower alpha --
you Append the current input character to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer) and you Reconsume in the RCDATA state.
List((9,CHAIN9-["the characters" in sentence 1, "they" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Node(NP,List(Leaf(DT,Token(each,each)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(characters,character)))))))))))))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Leaf(LBracket,Token((,()), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(order,order)))), Node(SBAR,List(Node(S,List(Node(NP,List(Leaf(PRP,Token(they,they)))), Node(VP,List(Leaf(VB,Token(were,be)), Node(VP,List(Leaf(VB,Token(added,add)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(buffer,buffer)))))))))))))))))), Leaf(RBracket,Token(),))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, a_character_token_for_each_of_the_characters, )_in_the_temporary_buffer_(_in_the_order_they_were_added_to_the_buffer_))
 -> Reconsume(the_RCDATA_state)

12 : RAWTEXT less-than sign state
-- chara: U+002F SOLIDUS (/) --
Set the temporary buffer to the empty string and you Switch to the RAWTEXT end tag open state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,rawtext)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Set(the_temporary_buffer,the_empty_string)
 -> Switch(the_RAWTEXT_end_tag_open_state)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the RAWTEXT state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,rawtext)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))
 -> Reconsume(the_RAWTEXT_state)

13 : RAWTEXT end tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string and you Reconsume in the RAWTEXT end tag name state. 
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RAWTEXT,rawtext)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Create(List (a_new_end_tag_token, ))
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_RAWTEXT_end_tag_name_state)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and you Reconsume in the RAWTEXT state.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,rawtext)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, ))
 -> Reconsume(the_RAWTEXT_state)

14 : RAWTEXT end tag name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000A LINE FEED (LF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000C FORM FEED (FF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+0020 SPACE --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+002F SOLIDUS (/) --
If the current end tag token is an appropriate end tag token , then you switch to the self-closing start tag state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_self_-_closing_start_tag_state)),List(Treat()))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the current end tag token is an appropriate end tag token , then you switch to the data state and you emit the current tag token . Otherwise, treat it as per the "anything else" entry below.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current end tag token" in sentence 1, "the current tag token" in sentence 1]))
List((8,CHAIN8-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.)))
error_otherwise

 -> If(Bool(otherwise),null,List(Treat()))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: ASCII lower alpha --
you Append the current input character to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer) and you Reconsume in the RAWTEXT state.
List((10,CHAIN10-["the characters" in sentence 1, "they" in sentence 1]), (12,CHAIN12-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Node(NP,List(Leaf(DT,Token(each,each)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(characters,character)))))))))))))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Leaf(LBracket,Token((,()), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(order,order)))), Node(SBAR,List(Node(S,List(Node(NP,List(Leaf(PRP,Token(they,they)))), Node(VP,List(Leaf(VB,Token(were,be)), Node(VP,List(Leaf(VB,Token(added,add)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(buffer,buffer)))))))))))))))))), Leaf(RBracket,Token(),))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(RAWTEXT,rawtext)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, a_character_token_for_each_of_the_characters, )_in_the_temporary_buffer_(_in_the_order_they_were_added_to_the_buffer_))
 -> Reconsume(the_RAWTEXT_state)

15 : Script data less-than sign state
-- chara: U+002F SOLIDUS (/) --
Set the temporary buffer to the empty string and you Switch to the script data end tag open state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,data)))), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(JJ,Token(open,open)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Set(the_temporary_buffer,the_empty_string)
 -> Switch(the_script_data_end_tag_open_state)

-- chara: U+0021 EXCLAMATION MARK (!) --
you Switch to the script data escape start state and you Emit a UP003C LESS-THAN SIGN character token and a UP0021 EXCLAMATION MARK character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(escape,escape)), Leaf(NN,Token(start,start)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP0021,up0021)), Leaf(NNP,Token(EXCLAMATION,EXCLAMATION)))), Leaf(NNP,Token(MARK,MARK)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escape_start_state)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP0021_EXCLAMATION_MARK_character_token, ))

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the script data state.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))
 -> Reconsume(the_script_data_state)

16 : Script data end tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string and you Reconsume in the script data end tag name state. 
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,data)))), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Create(List (a_new_end_tag_token, ))
 -> Set(its_tag_name,the_empty_string)
 -> Reconsume(the_script_data_end_tag_name_state)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and you Reconsume in the script data state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, ))
 -> Reconsume(the_script_data_state)

17 : Script data end tag name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000A LINE FEED (LF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000C FORM FEED (FF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+0020 SPACE --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, you treat it as per the "anything else" entry below.
List((5,CHAIN5-["you" in sentence 1]), (6,CHAIN6-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2]), (6,CHAIN6-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(ADVP,List(Leaf(RB,Token(as,as)), Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(LDoubleQuote,Token(",")), Node(FRAG,List(Node(NP,List(Leaf(NN,Token(anything,anything)))), Node(ADVP,List(Leaf(RB,Token(else,else)))))), Leaf(RDoubleQuote,Token(",")))), Leaf(NN,Token(entry,entry)))), Node(ADVP,List(Leaf(RB,Token(below,below)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+002F SOLIDUS (/) --
If the current end tag token is an appropriate end tag token , then you switch to the self-closing start tag state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_self_-_closing_start_tag_state)),List(Treat()))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the current end tag token is an appropriate end tag token , then you switch to the data state and you emit the current tag token . Otherwise, treat it as per the "anything else" entry below.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current end tag token" in sentence 1, "the current tag token" in sentence 1]))
List((8,CHAIN8-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.)))
error_otherwise

 -> If(Bool(otherwise),null,List(Treat()))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: ASCII lower alpha --
you Append the current input character to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer) and you Reconsume in the script data state.
List((9,CHAIN9-["the characters" in sentence 1, "they" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Node(NP,List(Leaf(DT,Token(each,each)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(characters,character)))))))))))))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Leaf(LBracket,Token((,()), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(order,order)))), Node(SBAR,List(Node(S,List(Node(NP,List(Leaf(PRP,Token(they,they)))), Node(VP,List(Leaf(VB,Token(were,be)), Node(VP,List(Leaf(VB,Token(added,add)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(buffer,buffer)))))))))))))))))), Leaf(RBracket,Token(),))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, a_character_token_for_each_of_the_characters, )_in_the_temporary_buffer_(_in_the_order_they_were_added_to_the_buffer_))
 -> Reconsume(the_script_data_state)

18 : Script data escape start state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data escape start dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((2,CHAIN2-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(escape,escape)), Leaf(NN,Token(start,start)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escape_start_dash_state)
 -> Emit(List (a_UP002D_HYPHEN_-_MINUS_character_token, ))

-- chara: Anything else --
you Reconsume in the script data state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_script_data_state)

19 : Script data escape start dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data escaped dash dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(dash,dash)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: Anything else --
you Reconsume in the script data state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_script_data_state)

20 : Script data escaped state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data escaped dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data escaped less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)))))))), Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escaped_less_-_than_sign_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

21 : Script data escaped dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data escaped dash dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(dash,dash)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data escaped less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)))))))), Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escaped_less_-_than_sign_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Switch to the script data escaped state and you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root

 -> Error(an_unexpected_-_null_-_character_parse_error)

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Switch to the script data escaped state and you Emit the current input character as a character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escaped_state)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

22 : Script data escaped dash dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Emit a UP002D HYPHEN-MINUS character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP002D_HYPHEN_-_MINUS_character_token, ))

-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data escaped less-than sign state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)))))))), Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escaped_less_-_than_sign_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the script data state and you Emit a UP003E GREATER-THAN SIGN character token.
List((2,CHAIN2-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(NNP,Token(UP003E,up003e)), Leaf(NNP,Token(GREATER,greater)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_state)
 -> Emit(List (a_UP003E_GREATER_-_THAN_SIGN_character_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Switch to the script data escaped state and you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root

 -> Error(an_unexpected_-_null_-_character_parse_error)

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Switch to the script data escaped state and you Emit the current input character as a character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_escaped_state)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

23 : Script data escaped less-than sign state
-- chara: U+002F SOLIDUS (/) --
Set the temporary buffer to the empty string and you Switch to the script data escaped end tag open state.
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))), Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)))))))))))))))), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(ADJP,List(Node(NP,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(JJ,Token(open,open)))), Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(NP,List(Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))), Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)))))))))))))))), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(ADJP,List(Node(NP,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(JJ,Token(open,open)))), Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.)))


-- chara: ASCII alpha --
Set the temporary buffer to the empty string and you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the script data double escape start state.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(JJ,Token(double,double)), Leaf(NN,Token(escape,escape)), Leaf(NN,Token(start,start)), Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
err

 -> Set(the_temporary_buffer,the_empty_string)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and you Reconsume in the script data escaped state.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))
 -> Reconsume(the_script_data_escaped_state)

24 : Script data escaped end tag open state
-- chara: ASCII alpha --
Create a new end tag token and set its tag name to the empty string and you Reconsume in the script data escaped end tag name state.
List((1,CHAIN1-["a new end tag token" in sentence 1, "its" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(NP,List(Node(NP,List(Node(NML,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))))))))), Leaf(NNP,Token(Reconsume,Reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(NP,List(Node(NP,List(Node(NML,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))))))))), Leaf(NNP,Token(Reconsume,Reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.)))


-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and you Reconsume in the script data escaped state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, ))
 -> Reconsume(the_script_data_escaped_state)

25 : Script data escaped end tag name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000A LINE FEED (LF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+000C FORM FEED (FF) --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+0020 SPACE --
If the current end tag token is an appropriate end tag token , then you switch to the before attribute name state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_before_attribute_name_state)),List(Treat()))

-- chara: U+002F SOLIDUS (/) --
If the current end tag token is an appropriate end tag token , then you switch to the self-closing start tag state . Otherwise, treat it as per the "anything else" entry below.
List((5,CHAIN5-["the current end tag token" in sentence 1]))
List((5,CHAIN5-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_current_end_tag_token_is_an_appropriate_end_tag_token),List(Switch(the_self_-_closing_start_tag_state)),List(Treat()))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the current end tag token is an appropriate end tag token , then you switch to the data state and you emit the current tag token . Otherwise, treat it as per the "anything else" entry below.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current end tag token" in sentence 1, "the current tag token" in sentence 1]))
List((8,CHAIN8-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(VP,List(Leaf(VB,Token(treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(appropriate,appropriate)), Node(NML,List(Leaf(NN,Token(end,end)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(token,token)))))))))), Leaf(Comma,Token(,,,)), Node(S,List(Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.)))
error_otherwise

 -> If(Bool(otherwise),null,List(Treat()))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: ASCII lower alpha --
you Append the current input character to the current tag token's tag name and you Append the current input character to the temporary buffer.
List((7,CHAIN7-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(name,name)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_tag_token_'s_tag_name)
 -> Append(List (the_current_input_character, ),the_temporary_buffer)

-- chara: Anything else --
you Emit a UP003C LESS-THAN SIGN character token and a UP002F SOLIDUS character token and a character token for each of the characters in the temporary buffer  (in the order they were added to the buffer) and you Reconsume in the script data escaped state.
List((9,CHAIN9-["the characters" in sentence 1, "they" in sentence 1]), (11,CHAIN11-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))), Node(PP,List(Leaf(IN,Token(for,for)), Node(NP,List(Node(NP,List(Leaf(DT,Token(each,each)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(characters,character)))))))))))))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Leaf(LBracket,Token((,()), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(order,order)))), Node(SBAR,List(Node(S,List(Node(NP,List(Leaf(PRP,Token(they,they)))), Node(VP,List(Leaf(VB,Token(were,be)), Node(VP,List(Leaf(VB,Token(added,add)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(buffer,buffer)))))))))))))))))), Leaf(RBracket,Token(),))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, a_UP002F_SOLIDUS_character_token, a_character_token_for_each_of_the_characters, )_in_the_temporary_buffer_(_in_the_order_they_were_added_to_the_buffer_))
 -> Reconsume(the_script_data_escaped_state)

26 : Script data double escape start state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+000A LINE FEED (LF) --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+000C FORM FEED (FF) --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+0020 SPACE --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+002F SOLIDUS (/) --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the temporary buffer is the string "script" , then you switch to the script data double escaped state . Otherwise, you you switch to the script data escaped state and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1]))
List((5,CHAIN5-["you" in sentence 2, "you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_double_escaped_state)),List(Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer and you Emit the current input character as a character token.
List((6,CHAIN6-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (9,CHAIN9-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_temporary_buffer)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

-- chara: ASCII lower alpha --
you Append the current input character to the temporary buffer and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]), (6,CHAIN6-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_temporary_buffer)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

-- chara: Anything else --
you Reconsume in the script data escaped state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_script_data_escaped_state)

27 : Script data double escaped state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data double escaped dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(RB,Token(double,double)), Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data double escaped less-than sign state and you Emit a UP003C LESS-THAN SIGN character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
QP is not defined : 2
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(ADJP,List(Node(ADJP,List(Node(NP,List()), Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_less_-_than_sign_state)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Leaf(NNP,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Emit(List (a_UPFFFD_REPLACEMENT_CHARACTER_character_token, ))

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Emit the current input character as a character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_current_input_character, )_as_a_character_token)

28 : Script data double escaped dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the script data double escaped dash dash state and you Emit a UP002D HYPHEN-MINUS character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(RB,Token(double,double)), Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(dash,dash)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data double escaped less-than sign state and you Emit a UP003C LESS-THAN SIGN character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
QP is not defined : 2
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(ADJP,List(Node(ADJP,List(Node(NP,List()), Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_less_-_than_sign_state)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Switch to the script data double escaped state and you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(RB,Token(double,double)), Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root

 -> Error(an_unexpected_-_null_-_character_parse_error)

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Switch to the script data double escaped state and you Emit the current input character as a character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_double_escaped_state)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

29 : Script data double escaped dash dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Emit a UP002D HYPHEN-MINUS character token.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002D,up002d)), Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (a_UP002D_HYPHEN_-_MINUS_character_token, ))

-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Switch to the script data double escaped less-than sign state and you Emit a UP003C LESS-THAN SIGN character token.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
QP is not defined : 2
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(ADJP,List(Node(ADJP,List(Node(NP,List()), Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(CD,Token(UP003C,up003c)), Leaf(NNS,Token(LESS,less)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_less_-_than_sign_state)
 -> Emit(List (a_UP003C_LESS_-_THAN_SIGN_character_token, ))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the script data state and you Emit a UP003E GREATER-THAN SIGN character token.
List((2,CHAIN2-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(NNP,Token(UP003E,up003e)), Leaf(NNP,Token(GREATER,greater)))), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(THAN,than)))), Leaf(NNP,Token(SIGN,SIGN)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_state)
 -> Emit(List (a_UP003E_GREATER_-_THAN_SIGN_character_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Switch to the script data double escaped state and you Emit a UPFFFD REPLACEMENT CHARACTER character token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(SINV,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))))), Node(VP,List(Leaf(RB,Token(double,double)), Leaf(VB,Token(escaped,escape)), Node(NP,List(Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(CC,Token(and,and)))))), Node(NP,List(Node(NP,List(Leaf(NNP,Token(Emit,emit)))), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,replacement)), Leaf(NN,Token(CHARACTER,character)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))
error_root

 -> Error(an_unexpected_-_null_-_character_parse_error)

-- chara: EOF --
This is an eof-in-script-html-comment-like-text parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(script,script)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(like,like)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(text,text)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_script_-_html_-_comment_-_like_-_text_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Switch to the script data double escaped state and you Emit the current input character as a character token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_script_data_double_escaped_state)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

30 : Script data double escaped less-than sign state
-- chara: U+002F SOLIDUS (/) --
Set the temporary buffer to the empty string and you Switch to the script data double escape end state and you Emit a UP002F SOLIDUS character token.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Leaf(JJ,Token(double,double)), Leaf(NN,Token(escape,escape)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP002F,up002f)), Leaf(NNP,Token(SOLIDUS,SOLIDUS)))), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
err

 -> Set(the_temporary_buffer,the_empty_string)
 -> Switch(the_script_data_double_escape_end_state)

-- chara: Anything else --
you Reconsume in the script data double escaped state.
List()
Node(ROOT,List(Node(S,List(Node(ADVP,List(Node(NP,List(Node(NP,List(Leaf(NNP,Token(Reconsume,reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Leaf(RB,Token(double,double)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(ADVP,List(Node(NP,List(Node(NP,List(Leaf(NNP,Token(Reconsume,reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Leaf(RB,Token(double,double)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.)))


31 : Script data double escape end state
-- chara: U+0009 CHARACTER TABULATION (tab) --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+000A LINE FEED (LF) --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+000C FORM FEED (FF) --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+0020 SPACE --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+002F SOLIDUS (/) --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
If the temporary buffer is the string "script" , then you switch to the script data escaped state . Otherwise, you switch to the script data double escaped state and you Emit the current input character as a character token.
List((8,CHAIN8-["you" in sentence 1]))
List((8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(string,string)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(script,script)), Leaf(RDoubleQuote,Token(",")))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(script,script)), Leaf(NN,Token(data,datum)))), Node(NML,List(Leaf(JJ,Token(double,double)), Leaf(NN,Token(escaped,escape)))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> If(Bool(the_temporary_buffer_is_the_string_"_script_"),List(Switch(the_script_data_escaped_state)),List(Switch(the_script_data_double_escaped_state), Emit(List (the_current_input_character, )_as_a_character_token)))

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer and you Emit the current input character as a character token.
List((6,CHAIN6-["the current input character" in sentence 1, "the character 's" in sentence 1, "the current input character" in sentence 1]), (9,CHAIN9-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_temporary_buffer)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

-- chara: ASCII lower alpha --
you Append the current input character to the temporary buffer and you Emit the current input character as a character token.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]), (6,CHAIN6-["the current input character" in sentence 1, "the current input character" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(temporary,temporary)), Leaf(NN,Token(buffer,buffer)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_temporary_buffer)
 -> Emit(List (the_current_input_character, )_as_a_character_token)

-- chara: Anything else --
you Reconsume in the script data double escaped state.
List()
Node(ROOT,List(Node(S,List(Node(ADVP,List(Node(NP,List(Node(NP,List(Leaf(NNP,Token(Reconsume,reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Leaf(RB,Token(double,double)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.))))))
not match_s : List(Node(ADVP,List(Node(NP,List(Node(NP,List(Leaf(NNP,Token(Reconsume,reconsume)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(script,script)), Leaf(NNS,Token(data,datum)))))))), Leaf(RB,Token(double,double)))), Node(VP,List(Leaf(VB,Token(escaped,escape)), Node(NP,List(Leaf(NN,Token(state,state)))))), Leaf(Dot,Token(.,.)))


32 : Before attribute name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000A LINE FEED (LF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000C FORM FEED (FF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+0020 SPACE --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+002F SOLIDUS (/) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: EOF --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+003D EQUALS SIGN (=) --
This is an unexpected-equals-sign-before-attribute-name parse error. Start a new attribute in the current tag token and Set that attribute's name to the current input character and its value to the empty string and you Switch to the attribute name state.
List((9,CHAIN9-["- attribute - name" in sentence 1]))
List((9,CHAIN9-["that attribute 's name" in sentence 2]), (11,CHAIN11-["a new attribute" in sentence 2, "that attribute 's" in sentence 2, "its" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(unexpected,unexpected)), Node(NML,List(Node(PP,List(Leaf(SYM,Token(-,-)), Node(NP,List(Leaf(NN,Token(equals,equal)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(sign,sign)))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(before,before)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Start,start)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(attribute,attribute)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Node(NP,List(Leaf(DT,Token(that,that)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(value,value)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(NP,List(Node(NP,List(Leaf(DT,Token(that,that)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(name,name)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Leaf(CC,Token(and,and)), Node(NP,List(Leaf(PRPD,Token(its,its)), Leaf(NN,Token(value,value)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))

 -> Error(an_unexpected_-_equals_-_sign_-_before_-_attribute_-_name_parse_error)
 -> Start()
 -> Switch(the_attribute_name_state)

-- chara: Anything else --
Start a new attribute in the current tag token and Set that attribute name and value to the empty string and you Reconsume in the attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Start,start)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(attribute,attribute)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(Set,set)), Node(SBAR,List(Leaf(IN,Token(that,that)), Node(S,List(Node(VP,List(Leaf(VB,Token(attribute,attribute)), Node(NP,List(Leaf(NN,Token(name,name)), Leaf(CC,Token(and,and)), Leaf(NN,Token(value,value)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(SBAR,List(Leaf(IN,Token(that,that)), Node(S,List(Node(VP,List(Leaf(VB,Token(attribute,attribute)), Node(NP,List(Leaf(NN,Token(name,name)), Leaf(CC,Token(and,and)), Leaf(NN,Token(value,value)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))

 -> Start()
 -> Reconsume(the_attribute_name_state)

33 : Attribute name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+000A LINE FEED (LF) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+000C FORM FEED (FF) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+0020 SPACE --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+002F SOLIDUS (/) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: EOF --
you Reconsume in the after attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_after_attribute_name_state)

-- chara: U+003D EQUALS SIGN (=) --
you Switch to the before attribute value state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(value,value)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_value_state)

-- chara: ASCII upper alpha --
you Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current attribute's name.
List((6,CHAIN6-["the current input character" in sentence 1, "the character 's" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(lowercase,lowercase)), Leaf(NN,Token(version,version)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_lowercase_version_of_the_current_input_character, ),the_current_attribute_'s_name)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's name.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_current_attribute_'s_name)

-- chara: U+0022 QUOTATION MARK (") --
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_attribute_-_name_parse_error)
 -> Treat()

-- chara: U+0027 APOSTROPHE (') --
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_attribute_-_name_parse_error)
 -> Treat()

-- chara: U+003C LESS-THAN SIGN (&lt;) --
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_attribute_-_name_parse_error)
 -> Treat()

-- chara: Anything else --
you Append the current input character to the current attribute's name.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(name,name)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_attribute_'s_name)

34 : After attribute name state
-- chara: U+0009 CHARACTER TABULATION (tab) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000A LINE FEED (LF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000C FORM FEED (FF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+0020 SPACE --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+002F SOLIDUS (/) --
you Switch to the self-closing start tag state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_self_-_closing_start_tag_state)

-- chara: U+003D EQUALS SIGN (=) --
you Switch to the before attribute value state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(value,value)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_value_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the current tag token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_current_tag_token, ))

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
Start a new attribute in the current tag token and Set that attribute name and value to the empty string and you Reconsume in the attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Start,start)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(NN,Token(attribute,attribute)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(Set,set)), Node(SBAR,List(Leaf(IN,Token(that,that)), Node(S,List(Node(VP,List(Leaf(VB,Token(attribute,attribute)), Node(NP,List(Leaf(NN,Token(name,name)), Leaf(CC,Token(and,and)), Leaf(NN,Token(value,value)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(SBAR,List(Leaf(IN,Token(that,that)), Node(S,List(Node(VP,List(Leaf(VB,Token(attribute,attribute)), Node(NP,List(Leaf(NN,Token(name,name)), Leaf(CC,Token(and,and)), Leaf(NN,Token(value,value)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))

 -> Start()
 -> Reconsume(the_attribute_name_state)

35 : Before attribute value state
-- chara: U+0009 CHARACTER TABULATION (tab) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000A LINE FEED (LF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+000C FORM FEED (FF) --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+0020 SPACE --
Ignore the character.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Ignore,ignore)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)))))), Leaf(Dot,Token(.,.))))))

 -> Ignore(List (the_character, ))

-- chara: U+0022 QUOTATION MARK (") --
you Switch to the attribute value (double-quoted) state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Node(NML,List(Leaf(NN,Token(value,value)))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_attribute_value_state)

-- chara: U+0027 APOSTROPHE (') --
you you Switch to the attribute value (single-quoted) state.
List((1,CHAIN1-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(state,state)))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(state,state)))


-- chara: U+003E GREATER-THAN SIGN (&gt;) --
This is a missing-attribute-value parse error. you Switch to the data state and you Emit the current tag token.
List()
List((6,CHAIN6-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(NP,List(Leaf(JJ,Token(missing,missing)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)), Leaf(VB,Token(parse,parse)))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(a_missing_-_attribute_-_value_parse_error)
 -> Switch(the_data_state)
 -> Emit(List (the_current_tag_token, ))

-- chara: Anything else --
you you Reconsume in the attribute value (unquoted) state.
List((1,CHAIN1-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)), Leaf(LBracket,Token((,()), Leaf(JJ,Token(unquoted,unquoted)), Leaf(RBracket,Token(),))), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_attribute_value_(_unquoted_)_state)

36 : Attribute value (double-quoted) state
-- chara: U+0022 QUOTATION MARK (") --
you Switch to the after attribute value (quoted) state.
List()
Node(ROOT,List(Node(FRAG,List(Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(value,value)))))), Leaf(LBracket,Token((,()), Node(VP,List(Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))), Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+0026 AMPERSAND (&amp;) --
you Set the return state to the attribute value (double-quoted) state and you Switch to the character reference state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(return,return)), Node(NP,List(Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)))), Leaf(LBracket,Token((,()), Node(ADJP,List(Leaf(NN,Token(double,double)), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))))))))))))), Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(return,return)), Node(NP,List(Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)))), Leaf(LBracket,Token((,()), Node(ADJP,List(Leaf(NN,Token(double,double)), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))))))))))))), Leaf(NN,Token(state,state)))))

 -> Switch(the_character_reference_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_current_attribute_'s_value)

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append the current input character to the current attribute's value.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_attribute_'s_value)

37 : Attribute value (single-quoted) state
-- chara: U+0027 APOSTROPHE (') --
you Switch to the after attribute value (quoted) state.
List()
Node(ROOT,List(Node(FRAG,List(Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(after,after)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(value,value)))))), Leaf(LBracket,Token((,()), Node(VP,List(Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))), Node(NP,List(Leaf(NN,Token(state,state)))), Leaf(Dot,Token(.,.))))))
error_root


-- chara: U+0026 AMPERSAND (&amp;) --
you Set the return state to the attribute value (single-quoted) state and you Switch to the character reference state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(return,return)), Node(NP,List(Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)))), Leaf(LBracket,Token((,()), Node(ADJP,List(Leaf(JJ,Token(single,single)), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))))))))))))), Leaf(NN,Token(state,state)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(return,return)), Node(NP,List(Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)))), Leaf(LBracket,Token((,()), Node(ADJP,List(Leaf(JJ,Token(single,single)), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(quoted,quote)))), Leaf(RBracket,Token(),))))))))))))), Leaf(NN,Token(state,state)))))

 -> Switch(the_character_reference_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_current_attribute_'s_value)

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append the current input character to the current attribute's value.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_attribute_'s_value)

38 : Attribute value (unquoted) state
-- chara: U+0009 CHARACTER TABULATION (tab) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000A LINE FEED (LF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000C FORM FEED (FF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+0020 SPACE --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+0026 AMPERSAND (&amp;) --
Set the return state to the attribute value (unquoted) state and you Switch to the character reference state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(return,return)), Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(attribute,attribute)), Leaf(NN,Token(value,value)), Leaf(LBracket,Token((,()), Leaf(JJ,Token(unquoted,unquoted)), Leaf(RBracket,Token(),))), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Set(the_return_state,the_attribute_value_(_unquoted_)_state)
 -> Switch(the_character_reference_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the current tag token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_current_tag_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the current attribute's value.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_current_attribute_'s_value)

-- chara: U+0022 QUOTATION MARK (") --
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(unquoted,unquoted)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_unquoted_-_attribute_-_value_parse_error)
 -> Treat()

-- chara: U+0027 APOSTROPHE (') --
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(unquoted,unquoted)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_unquoted_-_attribute_-_value_parse_error)
 -> Treat()

-- chara: U+003C LESS-THAN SIGN (&lt;) --
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(unquoted,unquoted)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_unquoted_-_attribute_-_value_parse_error)
 -> Treat()

-- chara: U+003D EQUALS SIGN (=) --
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(unquoted,unquoted)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_unquoted_-_attribute_-_value_parse_error)
 -> Treat()

-- chara: U+0060 GRAVE ACCENT (`) --
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
List((4,CHAIN4-["This" in sentence 1]))
List((4,CHAIN4-["it" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(unquoted,unquoted)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(attribute,attribute)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(value,value)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Treat,treat)), Node(NP,List(Leaf(PRP,Token(it,it)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Node(NML,List(Node(PP,List(Leaf(IN,Token(per,per)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")), Leaf(NN,Token(anything,anything)), Leaf(NN,Token(else,else)), Leaf(RDoubleQuote,Token(",")))))))), Leaf(NN,Token(entry,entry)))))), Node(ADVP,List(Leaf(RB,Token(below,below)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_character_-_in_-_unquoted_-_attribute_-_value_parse_error)
 -> Treat()

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append the current input character to the current attribute's value.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(attribute,attribute)), Leaf(POS,Token('s,'s)))), Leaf(NN,Token(value,value)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_current_attribute_'s_value)

39 : After attribute value (quoted) state
-- chara: U+0009 CHARACTER TABULATION (tab) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000A LINE FEED (LF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+000C FORM FEED (FF) --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+0020 SPACE --
you Switch to the before attribute name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_attribute_name_state)

-- chara: U+002F SOLIDUS (/) --
you Switch to the self-closing start tag state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(start,start)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_self_-_closing_start_tag_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the current tag token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_current_tag_token, ))

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
This is a missing-whitespace-between-attributes parse error. you Reconsume in the before attribute name state. 
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Node(ADJP,List(Leaf(JJ,Token(missing,missing)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(whitespace,whitespace)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(between,between)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NNS,Token(attributes,attribute)))))))), Leaf(NNP,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(a_missing_-_whitespace_-_between_-_attributes_parse_error)
 -> Reconsume(the_before_attribute_name_state)

40 : Self-closing start tag state
-- chara: U+003E GREATER-THAN SIGN (&gt;) --
Set the self-closing flag of the current tag token and you Switch to the data state and you Emit the current tag token.
List((7,CHAIN7-["you" in sentence 1, "you" in sentence 1]), (8,CHAIN8-["the current tag token" in sentence 1, "the current tag token" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(flag,flag)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Set,set)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(NN,Token(self,self)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(NN,Token(flag,flag)))), Node(PP,List(Leaf(IN,Token(of,of)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(tag,tag)), Leaf(NN,Token(token,token)))))))))
err

 -> Switch(the_data_state)

-- chara: EOF --
This is an eof-in-tag parse error. you Emit an end-of-file token.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Leaf(NN,Token(eof,eof)), Leaf(HYPH,Token(-,-)), Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(tag,tag)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_tag_parse_error)
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
This is an unexpected-solidus-in-tag parse error. you Reconsume in the before attribute name state.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(unexpected,unexpected)), Node(NML,List(Node(PP,List(Leaf(SYM,Token(-,-)), Node(NP,List(Leaf(NNS,Token(solidus,solidus)))))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(tag,tag)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Node(PP,List(Leaf(IN,Token(before,before)), Node(NP,List(Leaf(NN,Token(attribute,attribute)))))))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_solidus_-_in_-_tag_parse_error)
 -> Reconsume(the_before_attribute_name_state)

41 : Bogus comment state
-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the comment token.
List((2,CHAIN2-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_comment_token, ))

-- chara: EOF --
you Emit the comment and you Emit an end-of-file token.
List((3,CHAIN3-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Emit(List (the_comment, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the comment token's data.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_comment_token_'s_data)

-- chara: Anything else --
you Append the current input character to the comment token's data.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_comment_token_'s_data)

42 : Markup declaration open state
-- chara: Two U+002D HYPHEN-MINUS characters (-) --
Consume those two characters and create a comment token whose data is the empty string and you switch to the comment start state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Consume,consume)), Node(NP,List(Leaf(DT,Token(those,those)), Leaf(CD,Token(two,two)), Leaf(NNS,Token(characters,character)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(create,create)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(start,start)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Consume(List (those_two_characters, ))
 -> Create(List (a_comment_token_whose_data_is_the_empty_string, ))
 -> Switch(the_comment_start_state)

-- chara: ASCII case-insensitive match for the word "DOCTYPE" --
Consume those characters and you switch to the DOCTYPE state.
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Consume,consume)), Node(NP,List(Leaf(DT,Token(those,those)), Leaf(NNS,Token(characters,character)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(DOCTYPE,DOCTYPE)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Consume(List (those_characters, ))
 -> Switch(the_DOCTYPE_state)

-- chara: The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after) --
Consume those characters and If there is an adjusted current node and it is not an element in the HTML namespace , then you switch to the CDATA section state . Otherwise, this is a cdata-in-html-content parse error. Create a comment token whose data is the "[CDATA[" string and you Switch to the bogus comment state.
List((8,CHAIN8-["an adjusted current node" in sentence 1, "it" in sentence 1]))
List((8,CHAIN8-["this" in sentence 2]))
List()
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Consume,consume)), Node(NP,List(Leaf(DT,Token(those,those)), Leaf(NNS,Token(characters,character)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(SBAR,List(Leaf(IN,Token(If,if)), Node(S,List(Node(S,List(Node(NP,List(Leaf(EX,Token(there,there)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(adjusted,adjusted)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(node,node)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(NP,List(Leaf(PRP,Token(it,it)))), Node(VP,List(Leaf(VB,Token(is,be)), Leaf(RB,Token(not,not)), Node(NP,List(Node(NP,List(Leaf(DT,Token(an,a)), Leaf(NN,Token(element,element)))), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(HTML,html)), Leaf(NN,Token(namespace,namespace)))))))))))))))), Leaf(Comma,Token(,,,)), Node(ADVP,List(Leaf(RB,Token(then,then)))), Node(VP,List(Leaf(VB,Token(switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(CDATA,CDATA)), Leaf(NN,Token(section,section)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(ADVP,List(Leaf(RB,Token(Otherwise,otherwise)))), Leaf(Comma,Token(,,,)), Node(NP,List(Leaf(DT,Token(this,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(cdata,cdata)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(html,html)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(content,content)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")))), Leaf(LBracket,Token([,[)), Node(NP,List(Leaf(NNP,Token(CDATA,cdata)))))), Leaf(LBracket,Token([,[)), Node(NP,List(Leaf(LDoubleQuote,Token(",")), Node(NP,List(Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))))))))), Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(bogus,bogus)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Create,create)), Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(LDoubleQuote,Token(",")))), Leaf(LBracket,Token([,[)), Node(NP,List(Leaf(NNP,Token(CDATA,cdata)))))), Leaf(LBracket,Token([,[)), Node(NP,List(Leaf(LDoubleQuote,Token(",")), Node(NP,List(Leaf(NN,Token(string,string)))), Leaf(CC,Token(and,and)))))))))))))), Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(bogus,bogus)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))))

 -> Consume(List (those_characters, ))
 -> If(Bool(there_is_an_adjusted_current_node_and_it_is_not_an_element_in_the_HTML_namespace),List(Switch(the_CDATA_section_state)),List(Error(a_cdata_-_in_-_html_-_content_parse_error)))

-- chara: Anything else --
This is an incorrectly-opened-comment parse error. Create a comment token whose data is the empty string and you Switch to the bogus comment state (don't consume anything in the current state).
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(ADJP,List(Leaf(RB,Token(incorrectly,incorrectly)), Leaf(HYPH,Token(-,-)), Leaf(VB,Token(opened,open)))), Node(NML,List(Node(PP,List(Leaf(SYM,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))), Node(SBAR,List(Node(WHNP,List(Leaf(WPD,Token(whose,whose)), Node(NML,List(Leaf(NNS,Token(data,datum)))))), Node(S,List(Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(empty,empty)), Leaf(NN,Token(string,string)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_incorrectly_-_opened_-_comment_parse_error)
 -> Create(List (a_comment_token_whose_data_is_the_empty_string, ))

43 : Comment start state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment start dash state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(start,start)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_comment_start_dash_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
This is an abrupt-closing-of-empty-comment parse error. you Switch to the data state and you Emit the comment token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(abrupt,abrupt)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(empty,empty)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_abrupt_-_closing_-_of_-_empty_-_comment_parse_error)
 -> Switch(the_data_state)
 -> Emit(List (the_comment_token, ))

-- chara: Anything else --
you Reconsume in the comment state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_state)

44 : Comment start dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment end state
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state))))))))))))

 -> Switch(the_comment_end_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
This is an abrupt-closing-of-empty-comment parse error. you Switch to the data state and you Emit the comment token.
List()
List((4,CHAIN4-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NP,List(Leaf(JJ,Token(abrupt,abrupt)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(closing,closing)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(empty,empty)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)))))))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_abrupt_-_closing_-_of_-_empty_-_comment_parse_error)
 -> Switch(the_data_state)
 -> Emit(List (the_comment_token, ))

-- chara: EOF --
This is an eof-in-comment parse error. you Emit the comment token and you Emit an end-of-file token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_comment_parse_error)
 -> Emit(List (the_comment_token, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data and you Reconsume in the comment state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NNP,Token(UP002D,up002d)), Node(NML,List(Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (a_UP002D_HYPHEN_-_MINUS_character, ),the_comment_token_'s_data)
 -> Reconsume(the_comment_state)

45 : Comment state
-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Append the current input character to the comment token's data and you Switch to the comment less-than sign state.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)))), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state,state)))))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_comment_token_'s_data)
 -> Switch(the_comment_less_-_than_sign_state)

-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment end dash state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_comment_end_dash_state)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. you Append a UPFFFD REPLACEMENT CHARACTER character to the comment token's data.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(ADJP,List(Leaf(JJ,Token(unexpected,unexpected)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(null,null)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(character,character)))), Leaf(NN,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(UPFFFD,UPFFFD)), Node(NML,List(Leaf(NN,Token(REPLACEMENT,REPLACEMENT)), Leaf(NN,Token(CHARACTER,CHARACTER)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_unexpected_-_null_-_character_parse_error)
 -> Append(List (a_UPFFFD_REPLACEMENT_CHARACTER_character, ),the_comment_token_'s_data)

-- chara: EOF --
This is an eof-in-comment parse error. you Emit the comment token and you Emit an end-of-file token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_comment_parse_error)
 -> Emit(List (the_comment_token, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append the current input character to the comment token's data.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_comment_token_'s_data)

46 : Comment less-than sign state
-- chara: U+0021 EXCLAMATION MARK (!) --
you Append the current input character to the comment token's data and you Switch to the comment less-than sign bang state.
List((6,CHAIN6-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)))), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(bang,bang)), Leaf(NN,Token(state,state)))))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_comment_token_'s_data)
 -> Switch(the_comment_less_-_than_sign_bang_state)

-- chara: U+003C LESS-THAN SIGN (&lt;) --
you Append the current input character to the comment token's data.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (the_current_input_character, ),the_comment_token_'s_data)

-- chara: Anything else --
you Reconsume in the comment state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_state)

47 : Comment less-than sign bang state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment less-than sign bang dash state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(ADJP,List(Node(ADJP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)))), Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(bang,bang)))))))), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_comment_less_-_than_sign_bang_dash_state)

-- chara: Anything else --
you Reconsume in the comment state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_state)

48 : Comment less-than sign bang dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment less-than sign bang dash dash state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)))), Node(ADJP,List(Node(ADJP,List(Leaf(JJR,Token(less,less)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(than,than)), Node(NP,List(Leaf(NN,Token(sign,sign)), Leaf(NN,Token(bang,bang)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_comment_less_-_than_sign_bang_dash_dash_state)

-- chara: Anything else --
you Reconsume in the comment end dash state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_end_dash_state)

49 : Comment less-than sign bang dash dash state
-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Reconsume in the comment end state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_end_state)

-- chara: EOF --
you Reconsume in the comment end state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_comment_end_state)

-- chara: Anything else --
This is a nested-comment parse error. you Reconsume in the comment end state.
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(VB,Token(nested,nest)), Node(NML,List(Node(PP,List(Leaf(SYM,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(a_nested_-_comment_parse_error)
 -> Reconsume(the_comment_end_state)

50 : Comment end dash state
-- chara: U+002D HYPHEN-MINUS (-) --
you Switch to the comment end state
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(state,state))))))))))))

 -> Switch(the_comment_end_state)

-- chara: EOF --
This is an eof-in-comment parse error. you Emit the comment token and you Emit an end-of-file token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_comment_parse_error)
 -> Emit(List (the_comment_token, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data and you Reconsume in the comment state.
List((4,CHAIN4-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NNP,Token(UP002D,up002d)), Node(NML,List(Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (a_UP002D_HYPHEN_-_MINUS_character, ),the_comment_token_'s_data)
 -> Reconsume(the_comment_state)

51 : Comment end state
-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Switch to the data state and you Emit the comment token.
List((2,CHAIN2-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_data_state)
 -> Emit(List (the_comment_token, ))

-- chara: U+0021 EXCLAMATION MARK (!) --
you Switch to the comment end bang state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(bang,bang)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_comment_end_bang_state)

-- chara: U+002D HYPHEN-MINUS (-) --
you Append a UP002D HYPHEN-MINUS character (-) to the comment token's data.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NNP,Token(UP002D,up002d)), Node(NML,List(Leaf(NNP,Token(HYPHEN,hyphen)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,minus)))), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (a_UP002D_HYPHEN_-_MINUS_character, ),the_comment_token_'s_data)

-- chara: EOF --
This is an eof-in-comment parse error. you Emit the comment token and you Emit an end-of-file token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_comment_parse_error)
 -> Emit(List (the_comment_token, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append two UP002D HYPHEN-MINUS characters (-) to the comment token's data and you Reconsume in the comment state.
List((5,CHAIN5-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(CD,Token(two,two)), Node(NML,List(Leaf(NNP,Token(UP002D,UP002D)), Leaf(NNP,Token(HYPHEN,HYPHEN)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,MINUS)))), Leaf(NNS,Token(characters,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))
dont match_vp : List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(CD,Token(two,two)), Node(NML,List(Leaf(NNP,Token(UP002D,UP002D)), Leaf(NNP,Token(HYPHEN,HYPHEN)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,MINUS)))), Leaf(NNS,Token(characters,character)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))

 -> Reconsume(the_comment_state)

52 : Comment end bang state
-- chara: U+002D HYPHEN-MINUS (-) --
you Append two UP002D HYPHEN-MINUS characters (-) and a UP0021 EXCLAMATION MARK character (-EXC-) to the comment token's data and you Switch to the comment end dash state.
List((9,CHAIN9-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(CD,Token(two,two)), Node(NML,List(Leaf(NNP,Token(UP002D,UP002D)), Leaf(NNP,Token(HYPHEN,HYPHEN)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,MINUS)))), Leaf(NNS,Token(characters,character)))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP0021,up0021)), Leaf(NNP,Token(EXCLAMATION,EXCLAMATION)))), Leaf(NNP,Token(MARK,MARK)), Leaf(NN,Token(character,character)))), Leaf(LBracket,Token((,()), Node(NP,List(Leaf(NFP,Token(-,-)), Leaf(NN,Token(EXC,exc)), Leaf(NFP,Token(-,-)))), Leaf(RBracket,Token(),))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(end,end)), Leaf(NN,Token(dash,dash)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (two_UP002D_HYPHEN_-_MINUS_characters, a_UP0021_EXCLAMATION_MARK_character_(_-_EXC_-_), ),the_comment_token_'s_data)
 -> Switch(the_comment_end_dash_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
This is an incorrectly-closed-comment parse error. you Switch to the data state and you Emit the comment token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(ADJP,List(Leaf(RB,Token(incorrectly,incorrectly)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(closed,close)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(comment,comment)), Leaf(JJ,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(data,datum)), Leaf(NN,Token(state,state)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_incorrectly_-_closed_-_comment_parse_error)
 -> Switch(the_data_state)
 -> Emit(List (the_comment_token, ))

-- chara: EOF --
This is an eof-in-comment parse error. you Emit the comment token and you Emit an end-of-file token.
List()
List((3,CHAIN3-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(comment,comment)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(an_eof_-_in_-_comment_parse_error)
 -> Emit(List (the_comment_token, ))
 -> Emit(List (an_end_-_of_-_file_token, ))

-- chara: Anything else --
you Append two UP002D HYPHEN-MINUS characters (-) and a UP0021 EXCLAMATION MARK character (-EXC-) to the comment token's data and you Reconsume in the comment state.
List((8,CHAIN8-["you" in sentence 1, "you" in sentence 1]))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Append,append)), Node(NP,List(Node(NP,List(Leaf(CD,Token(two,two)), Node(NML,List(Leaf(NNP,Token(UP002D,UP002D)), Leaf(NNP,Token(HYPHEN,HYPHEN)), Leaf(HYPH,Token(-,-)), Leaf(NNP,Token(MINUS,MINUS)))), Leaf(NNS,Token(characters,character)))), Leaf(CC,Token(and,and)), Node(NP,List(Node(NP,List(Leaf(DT,Token(a,a)), Node(NML,List(Leaf(NNP,Token(UP0021,up0021)), Leaf(NNP,Token(EXCLAMATION,EXCLAMATION)))), Leaf(NNP,Token(MARK,MARK)), Leaf(NN,Token(character,character)))), Leaf(LBracket,Token((,()), Node(NP,List(Leaf(NFP,Token(-,-)), Leaf(NN,Token(EXC,exc)), Leaf(NFP,Token(-,-)))), Leaf(RBracket,Token(),))))))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(token,token)), Leaf(POS,Token('s,'s)))), Leaf(NNS,Token(data,datum)))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,Reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(comment,comment)), Leaf(NN,Token(state,state)))))))))), Leaf(Dot,Token(.,.))))))

 -> Append(List (two_UP002D_HYPHEN_-_MINUS_characters, a_UP0021_EXCLAMATION_MARK_character_(_-_EXC_-_), ),the_comment_token_'s_data)
 -> Reconsume(the_comment_state)

53 : DOCTYPE state
-- chara: U+0009 CHARACTER TABULATION (tab) --
you Switch to the before DOCTYPE name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_DOCTYPE_name_state)

-- chara: U+000A LINE FEED (LF) --
you Switch to the before DOCTYPE name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_DOCTYPE_name_state)

-- chara: U+000C FORM FEED (FF) --
you Switch to the before DOCTYPE name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_DOCTYPE_name_state)

-- chara: U+0020 SPACE --
you Switch to the before DOCTYPE name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Switch(the_before_DOCTYPE_name_state)

-- chara: U+003E GREATER-THAN SIGN (&gt;) --
you Reconsume in the before DOCTYPE name state.
List()
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Reconsume(the_before_DOCTYPE_name_state)

-- chara: EOF --
This is an eof-in-doctype parse error. Create a new DOCTYPE token and Set its force-quirks flag to on and you Emit the token and you Emit an end-of-file token.
List()
List((4,CHAIN4-["a new DOCTYPE token" in sentence 2, "its" in sentence 2, "the token" in sentence 2]), (8,CHAIN8-["you" in sentence 2, "you" in sentence 2]))
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(eof,eof)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(in,in)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(JJ,Token(doctype,doctype)), Leaf(NNS,Token(parse,parse)))))))), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(S,List(Node(VP,List(Node(VP,List(Leaf(VB,Token(Create,create)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(JJ,Token(new,new)), Leaf(JJ,Token(DOCTYPE,doctype)), Leaf(NN,Token(token,token)))))), Leaf(CC,Token(and,and)), Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(PRPD,Token(its,its)), Node(NML,List(Leaf(NN,Token(force,force)), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(quirks,quirk)))), Leaf(NN,Token(flag,flag)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(PP,List(Leaf(IN,Token(on,on)))))))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(token,token)))))))), Leaf(CC,Token(and,and)), Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Node(NML,List(Node(NML,List(Leaf(NN,Token(end,end)))), Leaf(HYPH,Token(-,-)), Node(PP,List(Leaf(IN,Token(of,of)), Leaf(HYPH,Token(-,-)), Node(NP,List(Leaf(NN,Token(file,file)))))))), Leaf(NN,Token(token,token)))))))))), Leaf(Dot,Token(.,.))))))
err

 -> Error(an_eof_-_in_-_doctype_parse_error)
 -> Create(List (a_new_DOCTYPE_token, ))
 -> Set(its_force_-_quirks_flag,on)
 -> Emit(List (the_token, ))

-- chara: Anything else --
This is a missing-whitespace-before-doctype-name parse error. you Reconsume in the before DOCTYPE name state. 
List()
List()
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VB,Token(is,be)), Node(NP,List(Leaf(DT,Token(a,a)), Node(ADJP,List(Leaf(JJ,Token(missing,missing)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(whitespace,whitespace)))), Leaf(HYPH,Token(-,-)), Node(ADJP,List(Leaf(JJ,Token(before,before)), Leaf(HYPH,Token(-,-)), Leaf(JJ,Token(doctype,doctype)))), Leaf(HYPH,Token(-,-)), Leaf(NN,Token(name,name)), Leaf(JJ,Token(parse,parse)), Leaf(NN,Token(error,error)))))), Leaf(Dot,Token(.,.))))))
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Reconsume,reconsume)), Node(PP,List(Leaf(IN,Token(in,in)), Node(NP,List(Leaf(DT,Token(the,the)), Node(NML,List(Leaf(JJ,Token(before,before)), Leaf(NN,Token(DOCTYPE,doctype)))), Leaf(NN,Token(name,name)), Leaf(NN,Token(state,state)))))))), Leaf(Dot,Token(.,.))))))

 -> Error(a_missing_-_whitespace_-_before_-_doctype_-_name_parse_error)
 -> Reconsume(the_before_DOCTYPE_name_state)

