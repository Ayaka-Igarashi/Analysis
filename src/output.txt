1 : Data state
-- chara: U+0026 AMPERSAND (&amp;) --
Set the return state to the data state. Switch to the character reference state.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(SBAR,List(Node(S,List(Node(NP,List(Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(return,return)), Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNS,Token(data,datum)))))))), Node(ADVP,List(Leaf(RB,Token(state.,state.)))), Node(VP,List(Leaf(VBP,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state.,state.))))))))))))))))))


-- chara: U+003C LESS-THAN SIGN (&lt;) --
Switch to the tag open state.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(tag,tag)), Leaf(JJ,Token(open,open)), Leaf(NN,Token(state.,state.))))))))))))

 -> Switch(the_tag_open_state.)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. Emit the current input character as a character token.
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VBZ,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(unexpected-null-character,unexpected-null-character)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(parse,parse)), Node(S,List(Node(NP,List(Leaf(NN,Token(error.,error.)))), Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)))))))))))))))), Leaf(NN,Token(token.,token.))))))))))


-- chara: EOF --
Emit an end-of-file token.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(end-of-file,end-of-file)), Leaf(NN,Token(token.,token.))))))))))

 -> Emit(an_end-of-file_token.)

-- chara: Anything else --
Emit the current input character as a character token.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token.,token.))))))))))))

 -> Emit(the_current_input_characteras_a_character_token.)

2 : RCDATA state
-- chara: U+0026 AMPERSAND (&amp;) --
Set the return state to the RCDATA state. Switch to the character reference state.
Node(ROOT,List(Node(S,List(Node(PRN,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Set,set)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(return,return)), Leaf(NN,Token(state,state)))), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)))))))))))), Node(NP,List(Leaf(NNS,Token(state.,state.)))), Node(VP,List(Leaf(VBP,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NN,Token(character,character)), Leaf(NN,Token(reference,reference)), Leaf(NN,Token(state.,state.))))))))))))


-- chara: U+003C LESS-THAN SIGN (&lt;) --
Switch to the RCDATA less-than sign state.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Switch,switch)), Node(PP,List(Leaf(IN,Token(to,to)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(NNP,Token(RCDATA,RCDATA)), Leaf(JJ,Token(less-than,less-than)), Leaf(NN,Token(sign,sign)), Leaf(NN,Token(state.,state.))))))))))))

 -> Switch(the_RCDATA_less-than_sign_state.)

-- chara: U+0000 NULL --
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
Node(ROOT,List(Node(S,List(Node(NP,List(Leaf(DT,Token(This,this)))), Node(VP,List(Leaf(VBZ,Token(is,be)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(unexpected-null-character,unexpected-null-character)), Node(NML,List(Node(S,List(Node(VP,List(Leaf(VB,Token(parse,parse)), Node(S,List(Node(NP,List(Leaf(NN,Token(error.,error.)))), Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NNP,Token(U+FFFD,U+FFFD)), Leaf(NNP,Token(REPLACEMENT,REPLACEMENT)), Leaf(NNP,Token(CHARACTER,CHARACTER)), Leaf(NN,Token(character,character)))))))))))))), Leaf(NN,Token(token.,token.))))))))))


-- chara: EOF --
Emit an end-of-file token.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(an,a)), Leaf(JJ,Token(end-of-file,end-of-file)), Leaf(NN,Token(token.,token.))))))))))

 -> Emit(an_end-of-file_token.)

-- chara: Anything else --
Emit the current input character as a character token.
Node(ROOT,List(Node(S,List(Node(VP,List(Leaf(VB,Token(Emit,emit)), Node(NP,List(Leaf(DT,Token(the,the)), Leaf(JJ,Token(current,current)), Leaf(NN,Token(input,input)), Leaf(NN,Token(character,character)))), Node(PP,List(Leaf(IN,Token(as,as)), Node(NP,List(Leaf(DT,Token(a,a)), Leaf(NN,Token(character,character)), Leaf(NN,Token(token.,token.))))))))))))

 -> Emit(the_current_input_characteras_a_character_token.)

