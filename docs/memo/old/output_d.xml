<?xml version="1.0" encoding="Shift_JIS" standalone="no"?>
<stateMap>
    <state>
        <name>Data_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0026 AMPERSAND (&amp;amp;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the return state</command_content>
                        <command_content>the Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RCDATA_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0026 AMPERSAND (&amp;amp;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the return state</command_content>
                        <command_content>the RCDATA_state</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>RCDATA_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RAWTEXT_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>RAWTEXT_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>PLAINTEXT_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0021 EXCLAMATION MARK (!)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Markup_declaration_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>End_tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new start tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003F QUESTION MARK (?)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_question_mark_instead_of_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (a comment token whose data is the empty string, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_before_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, an end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>invalid_first_character_of_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>End_tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new end tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_end_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_before_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, U_002F, an end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>invalid_first_character_of_tag_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (a comment token whose data is the empty string, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Tag_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Self_closing_start_tag_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RCDATA_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>RCDATA_end_tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RCDATA_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RCDATA_end_tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new end tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RCDATA_end_tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, a U_002F, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RCDATA_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RCDATA_end_tag_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Self_closing_start_tag_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Data_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current tag token, ) </command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RCDATA_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RAWTEXT_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>RAWTEXT_end_tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RAWTEXT_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RAWTEXT_end_tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new end tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RAWTEXT_end_tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (UP003C LESS_THAN SIGN character token, a UP002F SOLIDUS character token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RAWTEXT_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>RAWTEXT_end_tag_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Self_closing_start_tag_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Data_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current tag token, ) </command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>RAWTEXT_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_end_tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0021 EXCLAMATION MARK (!)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escape_start_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, a U_0021, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_end_tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new end tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_end_tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, a U_002F, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_end_tag_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Self_closing_start_tag_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Data_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current tag token, ) </command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escape_start_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escape_start_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escape_start_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_dash_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_dash_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_dash_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003E, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_escaped_end_tag_open_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_double_escape_start_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_end_tag_open_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new end tag token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its tag name</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_escaped_end_tag_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, a U_002F, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_escaped_end_tag_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Before_attribute_name_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Self_closing_start_tag_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the current end tag token</content>
                                <content>an appropriate end tag token</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Data_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current tag token, ) </command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Treat</command_name>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current tag token 's tag name</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, U_002F, a character token for each of the characters in the temporary buffer, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escape_start_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escaped_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_less_than_sign_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escaped_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_dash_dash_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_less_than_sign_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escaped_dash_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_less_than_sign_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003C, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_003E, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_FFFD, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_script_html_comment_like_text parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escaped_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the temporary buffer</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Script_data_double_escape_end_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_002F, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Script_data_double_escape_end_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the temporary buffer</content>
                                <content>the string " script "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_escaped_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Script_data_double_escaped_state</command_content>
                            </l>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Script_data_double_escaped_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Before_attribute_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003D EQUALS SIGN (=)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_equals_sign_before_attribute_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Start</command_name>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>that attribute 's name</command_content>
                        <command_content>the current input character</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its value</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Start</command_name>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>that attribute 's name and value</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Attribute_name_state</name>
        <prev/>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>After_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003D EQUALS SIGN (=)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_value_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current attribute 's name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current attribute 's name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_attribute_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_attribute_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_attribute_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current attribute 's name</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_attribute_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Self_closing_start_tag_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003D EQUALS SIGN (=)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_value_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Start</command_name>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>that attribute 's name and value</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Before_attribute_value_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Attribute_value_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Attribute_value_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Attribute_value_unquoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Attribute_value_double_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_attribute_value_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0026 AMPERSAND (&amp;amp;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the return state</command_content>
                        <command_content>the Attribute_value_double_quoted_state</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Attribute_value_single_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_attribute_value_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0026 AMPERSAND (&amp;amp;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the return state</command_content>
                        <command_content>the Attribute_value_single_quoted_state</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Attribute_value_unquoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0026 AMPERSAND (&amp;amp;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the return state</command_content>
                        <command_content>the Attribute_value_unquoted_state</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_unquoted_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_unquoted_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_unquoted_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003D EQUALS SIGN (=)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_unquoted_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0060 GRAVE ACCENT (`)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_in_unquoted_attribute_value parse error</command_content>
                    </l>
                    <l>
                        <command_name>Treat</command_name>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current attribute 's value</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_attribute_value_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002F SOLIDUS (/)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Self_closing_start_tag_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_between_attributes parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Self_closing_start_tag_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the self_closing flag of the current tag token</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current tag token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_solidus_in_tag parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Before_attribute_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Bogus_comment_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Markup_declaration_open_state</name>
        <prev/>
        <trans>
            <l_t>
                <alpha>Two U+002D HYPHEN-MINUS characters (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Consume</command_name>
                        <command_content>List (two characters, ) </command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (a comment token whose data is the empty string, ) </command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_start_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII case-insensitive match for the word "DOCTYPE"</alpha>
                <command_list>
                    <l>
                        <command_name>Consume</command_name>
                        <command_content>List (characters, ) </command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after)</alpha>
                <command_list>
                    <l>
                        <command_name>Consume</command_name>
                        <command_content>List (characters, ) </command_content>
                    </l>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>And</bool_name>
                                <content>
                                    <bool>
                                        <bool_name>IsExist</bool_name>
                                        <content>an adjusted current node</content>
                                    </bool>
                                </content>
                                <content>
                                    <bool>
                                        <bool_name>Not</bool_name>
                                        <content>
                                            <bool>
                                                <bool_name>IsEqual</bool_name>
                                                <content>it</content>
                                                <content>an element in the HTML namespace</content>
                                            </bool>
                                        </content>
                                    </bool>
                                </content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>CDATA_section_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Error</command_name>
                                <command_content>cdata_in_html_content parse error</command_content>
                            </l>
                            <l>
                                <command_name>Create</command_name>
                                <command_content>List (a comment token whose data is the " [ CDATA [ " string, ) </command_content>
                            </l>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>Bogus_comment_state</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>incorrectly_opened_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (a comment token whose data is the empty string, ) </command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Bogus_comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_start_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_start_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_closing_of_empty_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_start_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_closing_of_empty_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (a U_002D HYPHEN_MINUS character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_less_than_sign_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_end_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_less_than_sign_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0021 EXCLAMATION MARK (!)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_less_than_sign_bang_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003C LESS-THAN SIGN (&amp;lt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_less_than_sign_bang_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_less_than_sign_bang_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_less_than_sign_bang_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_less_than_sign_bang_dash_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_end_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_less_than_sign_bang_dash_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>nested_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_end_dash_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (a U_002D HYPHEN_MINUS character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_end_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0021 EXCLAMATION MARK (!)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_end_bang_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (a U_002D HYPHEN_MINUS character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (two U_002D HYPHEN_MINUS characters, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Comment_end_bang_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+002D HYPHEN-MINUS (-)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (two U_002D HYPHEN_MINUS characters, a U_0021 EXCLAMATION MARK character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Comment_end_dash_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>incorrectly_closed_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_comment parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (comment token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (two U_002D HYPHEN_MINUS characters, a U_0021 EXCLAMATION MARK character, ) </command_content>
                        <command_content>the comment token 's data</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Comment_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_before_doctype_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Before_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Before_DOCTYPE_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the token 's name</command_content>
                        <command_content>the lowercase version of the current input character</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the token 's name</command_content>
                        <command_content>a U_FFFD REPLACEMENT CHARACTER character</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_doctype_name parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>its force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Create</command_name>
                        <command_content>List (new DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the token 's name</command_content>
                        <command_content>the current input character</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_name_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper alpha</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (the lowercase version of the current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current DOCTYPE token 's name</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's name</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_DOCTYPE_name_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>IsEqual</bool_name>
                                <content>the six characters starting from the current input character</content>
                                <content>an ASCII case_insensitive match for the word " PUBLIC "</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Consume</command_name>
                                <command_content>List (characters, ) </command_content>
                            </l>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>After_DOCTYPE_public_keyword_state</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>If</command_name>
                                <command_content>
                                    <bool>
                                        <bool_name>IsEqual</bool_name>
                                        <content>the six characters starting from the current input character</content>
                                        <content>an ASCII case_insensitive match for the word " SYSTEM "</content>
                                    </bool>
                                </command_content>
                                <command_content>
                                    <l>
                                        <command_name>Consume</command_name>
                                        <command_content>List (characters, ) </command_content>
                                    </l>
                                    <l>
                                        <command_name>Switch</command_name>
                                        <command_content>After_DOCTYPE_system_keyword_state</command_content>
                                    </l>
                                </command_content>
                                <command_content>
                                    <l>
                                        <command_name>Error</command_name>
                                        <command_content>invalid_character_sequence_after_doctype_name parse error</command_content>
                                    </l>
                                    <l>
                                        <command_name>Set</command_name>
                                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                                        <command_content>on</command_content>
                                    </l>
                                    <l>
                                        <command_name>Reconsume</command_name>
                                        <command_content>Bogus_DOCTYPE_state</command_content>
                                    </l>
                                </command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_DOCTYPE_public_keyword_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_after_doctype_public_keyword parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's public identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_public_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_after_doctype_public_keyword parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's public identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_public_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Before_DOCTYPE_public_identifier_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's public identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_public_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's public identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_public_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_public_identifier_double_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current DOCTYPE token 's public identifier</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's public identifier</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_public_identifier_single_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_public_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current DOCTYPE token 's public identifier</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_doctype_public_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's public identifier</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_DOCTYPE_public_identifier_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Between_DOCTYPE_public_and_system_identifiers_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Between_DOCTYPE_public_and_system_identifiers_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Between_DOCTYPE_public_and_system_identifiers_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Between_DOCTYPE_public_and_system_identifiers_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_between_doctype_public_and_system_identifiers parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_between_doctype_public_and_system_identifiers parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Between_DOCTYPE_public_and_system_identifiers_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_DOCTYPE_system_keyword_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Before_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_after_doctype_system_keyword parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_whitespace_after_doctype_system_keyword parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Before_DOCTYPE_system_identifier_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_double_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's system identifier</command_content>
                        <command_content>the empty string</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>DOCTYPE_system_identifier_single_quoted_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_quote_before_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_system_identifier_double_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0022 QUOTATION MARK (")</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current DOCTYPE token 's system identifier</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's system identifier</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>DOCTYPE_system_identifier_single_quoted_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0027 APOSTROPHE (')</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>After_DOCTYPE_system_identifier_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (U_FFFD REPLACEMENT CHARACTER character, ) </command_content>
                        <command_content>the current DOCTYPE token 's system identifier</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>abrupt_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the current DOCTYPE token 's system identifier</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>After_DOCTYPE_system_identifier_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0009 CHARACTER TABULATION (tab)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000A LINE FEED (LF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+000C FORM FEED (FF)</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0020 SPACE</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_doctype parse error</command_content>
                    </l>
                    <l>
                        <command_name>Set</command_name>
                        <command_content>the DOCTYPE token 's force_quirks flag</command_content>
                        <command_content>on</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_character_after_doctype_system_identifier parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Bogus_DOCTYPE_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Bogus_DOCTYPE_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN (&amp;gt;)</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0000 NULL</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unexpected_null_character parse error</command_content>
                    </l>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (DOCTYPE token, ) </command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Ignore</command_name>
                        <command_content>List (character, ) </command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>CDATA_section_state</name>
        <prev/>
        <trans>
            <l_t>
                <alpha>U+005D RIGHT SQUARE BRACKET (])</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>CDATA_section_bracket_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>EOF</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>eof_in_cdata parse error</command_content>
                    </l>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (end_of_file token, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (current input character, ) _as a character token</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>CDATA_section_bracket_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+005D RIGHT SQUARE BRACKET (])</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>CDATA_section_end_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_005D, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>CDATA_section_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>CDATA_section_end_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+005D RIGHT SQUARE BRACKET (])</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (U_005D, ) </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003E GREATER-THAN SIGN character</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Data_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Emit</command_name>
                        <command_content>List (two U_005Ds, ) </command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>CDATA_section_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Character_reference_state</name>
        <prev>
            <l>
                <command_name>Set</command_name>
                <command_content>the temporary buffer</command_content>
                <command_content>the empty string</command_content>
            </l>
            <l>
                <command_name>Append</command_name>
                <command_content>List (U_0026 AMPERSAND character, ) </command_content>
                <command_content>the temporary buffer</command_content>
            </l>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alphanumeric</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Named_character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0023 NUMBER SIGN (#)</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Numeric_character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Flush</command_name>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>return state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Named_character_reference_state</name>
        <prev/>
        <trans>
            <l_t>
                <alpha>If there is a match</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>UNDEF</bool_name>
                                <content>the character reference was consumed as part of an attribute , and the last character matched is not a U_003B SEMICOLON character ( ;) , and the next input character is either a U_003D EQUALS SIGN character ( =) or an ASCII alphanumeric</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Switch</command_name>
                                <command_content>return state</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Otherwise</alpha>
                <command_list>
                    <l>
                        <command_name>Flush</command_name>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Ambiguous_ampersand_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Ambiguous_ampersand_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII alphanumeric</alpha>
                <command_list>
                    <l>
                        <command_name>If</command_name>
                        <command_content>
                            <bool>
                                <bool_name>UNDEF</bool_name>
                                <content>the character reference was consumed as part of an attribute</content>
                            </bool>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Append</command_name>
                                <command_content>List (current input character, ) </command_content>
                                <command_content>the current attribute 's value</command_content>
                            </l>
                        </command_content>
                        <command_content>
                            <l>
                                <command_name>Emit</command_name>
                                <command_content>List (current input character, ) _as a character token</command_content>
                            </l>
                        </command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003B SEMICOLON (;)</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>unknown_named_character_reference parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>return state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>return state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Numeric_character_reference_state</name>
        <prev>
            <l>
                <command_name>Set</command_name>
                <command_content>the character reference code</command_content>
                <command_content>zero</command_content>
            </l>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>U+0078 LATIN SMALL LETTER X</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Hexadecimal_character_reference_start_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+0058 LATIN CAPITAL LETTER X</alpha>
                <command_list>
                    <l>
                        <command_name>Append</command_name>
                        <command_content>List (current input character, ) </command_content>
                        <command_content>the temporary buffer</command_content>
                    </l>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>Hexadecimal_character_reference_start_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Decimal_character_reference_start_state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Hexadecimal_character_reference_start_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII hex digit</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Hexadecimal_character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>absence_of_digits_in_numeric_character_reference parse error</command_content>
                    </l>
                    <l>
                        <command_name>Flush</command_name>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>return state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Decimal_character_reference_start_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII digit</alpha>
                <command_list>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>Decimal_character_reference_state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>absence_of_digits_in_numeric_character_reference parse error</command_content>
                    </l>
                    <l>
                        <command_name>Flush</command_name>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>return state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Hexadecimal_character_reference_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII digit</alpha>
                <command_list>
                    <l>
                        <command_name>Multiply</command_name>
                        <command_content>List (character reference code, ) </command_content>
                        <command_content>16</command_content>
                    </l>
                    <l>
                        <command_name>Add</command_name>
                        <command_content>List (a numeric version of the current input character, ) </command_content>
                        <command_content>the character reference code</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII upper hex digit</alpha>
                <command_list>
                    <l>
                        <command_name>Multiply</command_name>
                        <command_content>List (character reference code, ) </command_content>
                        <command_content>16</command_content>
                    </l>
                    <l>
                        <command_name>Add</command_name>
                        <command_content>List (a numeric version of the current input character as a hexadecimal digit, ) </command_content>
                        <command_content>the character reference code</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>ASCII lower hex digit</alpha>
                <command_list>
                    <l>
                        <command_name>Multiply</command_name>
                        <command_content>List (character reference code, ) </command_content>
                        <command_content>16</command_content>
                    </l>
                    <l>
                        <command_name>Add</command_name>
                        <command_content>List (a numeric version of the current input character as a hexadecimal digit, ) </command_content>
                        <command_content>the character reference code</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003B SEMICOLON</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>numeric character reference end state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_semicolon_after_character_reference parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>numeric character reference end state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
    <state>
        <name>Decimal_character_reference_state</name>
        <prev>
            <l>
                <command_name>Consume</command_name>
                <command_content>List (next input character, ) </command_content>
            </l>
        </prev>
        <trans>
            <l_t>
                <alpha>ASCII digit</alpha>
                <command_list>
                    <l>
                        <command_name>Multiply</command_name>
                        <command_content>List (character reference code, ) </command_content>
                        <command_content>10</command_content>
                    </l>
                    <l>
                        <command_name>Add</command_name>
                        <command_content>List (a numeric version of the current input character, ) </command_content>
                        <command_content>the character reference code</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>U+003B SEMICOLON</alpha>
                <command_list>
                    <l>
                        <command_name>Switch</command_name>
                        <command_content>numeric character reference end state</command_content>
                    </l>
                </command_list>
            </l_t>
            <l_t>
                <alpha>Anything else</alpha>
                <command_list>
                    <l>
                        <command_name>Error</command_name>
                        <command_content>missing_semicolon_after_character_reference parse error</command_content>
                    </l>
                    <l>
                        <command_name>Reconsume</command_name>
                        <command_content>numeric character reference end state</command_content>
                    </l>
                </command_list>
            </l_t>
        </trans>
    </state>
</stateMap>
